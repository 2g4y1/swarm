#!/bin/bash
source /var/lib/swarm/modules/variables
source $configs/hornet
source $configs/swarm
source $logs/dbpruner

# Get Service Status
status="$(systemctl show -p ActiveState --value hornet)"

if [ "$status" = "active" ] && [ "$dbplock" = "false" ] && [ -n "$maxdbsize" ]; then
    if [ "$pruning" = "true" ]; then
        sudo sed -i 's/pruning=.*/pruning=false/' $configs/hornet.cfg
        sudo jq '.snapshots.pruning.enabled = false' $hornetdir/config.json|sponge $hornetdir/config.json
        sudo jq '.snapshots.pruning.enabled = false' $hornetdir/config_comnet.json|sponge $hornetdir/config_comnet.json
        sudo jq '.snapshots.pruning.enabled = false' $hornetdir/config_devnet.json|sponge $hornetdir/config_devnet.json
        sudo systemctl restart hornet
    fi
    getdbsize="$(du -sb $hornetdir/${network}db/tangle.db | cut -f1)"
    let dbsize=$getdbsize/1000000
    if [ $dbsize -gt $maxdbsize ]; then
        # LOCK DBPRUNER until its finished
        sudo sed -i 's/dbplock=.*/dbplock=true/' $logs/dbpruner

        # Get current LSMI
        lsmi="$(curl -s http://localhost:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{"command": "getNodeInfo"}' | jq '.latestSolidSubtangleMilestoneIndex')"

        # Start pruning process
        pruningindex="$(curl -s http://localhost:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{"command": "getNodeInfo"}' | jq '.milestoneStartIndex')"

        # Get difference between LSMI and pruningindex
        let pruningdiff=$lsmi-$pruningindex

        if [ ! -n "$pruningmultiplier" ] || [ "$pruningmultiplier" -le "0" ]; then
            pruningmultiplier=0
        fi

        # Define the percentage of pruning
        if [ "$pruningmultiplier" -le "30" ]; then
            pruningpercent=0.001
        fi
        if [ "$pruningmultiplier" -gt "30" ]; then
            pruningpercent=0.002
        fi
        if [ "$pruningmultiplier" -gt "90" ]; then
            pruningpercent=0.003
        fi
        if [ "$pruningmultiplier" -gt "120" ]; then
            pruningpercent=0.004
        fi
        if [ "$pruningmultiplier" -gt "150" ]; then
            pruningpercent=0.005
        fi
        if [ "$pruningmultiplier" -gt "180" ]; then
            pruningpercent=0.006
        fi
        if [ "$pruningmultiplier" -gt "210" ]; then
            pruningpercent=0.007
        fi
        if [ "$pruningmultiplier" -gt "240" ]; then
            pruningpercent=0.008
        fi
        if [ "$pruningmultiplier" -gt "270" ]; then
            pruningpercent=0.009
        fi
        if [ "$pruningmultiplier" -gt "300" ]; then
            pruningpercent=0.01
        fi

        pruningvalue="$(awk "BEGIN {print $pruningdiff*$pruningpercent}")"
        pruningvalue="$(echo ${pruningvalue%\.*})"
        pruningindex="$(awk "BEGIN {print $pruningindex+$pruningvalue}")"

        lsindex="$(curl -s http://localhost:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{"command": "getNodeInfo"}' | jq '.lastSnapshottedMilestoneIndex')"
        if [ "$pruningindex" -lt "$lsindex" ]; then
            execpruning=`curl -s http://localhost:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{"command": "pruneDatabase","targetIndex": '$pruningindex'}'`

            if [ "$execpruning" != "{\"error\":\"no pruning needed.\"}" ]; then
                let pruningmultiplier=$pruningmultiplier+30
                getdbsize="$(du -sb $hornetdir/${network}db/tangle.db | cut -f1)"
                let maxdbsize=$getdbsize/1000000
                sudo sed -i 's/maxdbsize=.*/maxdbsize='$maxdbsize'/' $configs/swarm.cfg
                pruningdt=`date '+%m/%d/%Y %H:%M:%S'`
                sudo sed -i 's/pruningmultiplier=.*/pruningmultiplier='$pruningmultiplier'/' $logs/dbpruner
                sudo sed -i 's/pruningdt=.*/pruningdt='$pruningdt'/' $logs/dbpruner
            else
                if [ "$pruningmultiplier" -gt "0" ]; then
                    let pruningmultiplier="$pruningmultiplier-1"
                fi
                if [ ! -n "$pruningmultiplier" ] || [ "$pruningmultiplier" -le "0" ]; then
                    pruningmultiplier=0
                fi
                sudo sed -i 's/pruningmultiplier=.*/pruningmultiplier='$pruningmultiplier'/' $logs/dbpruner
                sudo sed -i 's/pruningdt=.*/pruningdt='$pruningdt'/' $logs/dbpruner
            fi
        fi

        # Remove LOCK file from tmp
        sudo sed -i 's/dbplock=.*/dbplock=false/' $logs/dbpruner
    else
        if [ "$pruningmultiplier" -gt "0" ]; then
            let pruningmultiplier="$pruningmultiplier-1"
            sudo sed -i 's/pruningmultiplier=.*/pruningmultiplier='$pruningmultiplier'/' $logs/dbpruner
        fi
        if [ ! -n "$pruningmultiplier" ] || [ "$pruningmultiplier" -le "0" ]; then
            pruningmultiplier=0
            sudo sed -i 's/pruningmultiplier=.*/pruningmultiplier='$pruningmultiplier'/' $logs/dbpruner
        fi
    fi
    unset getdbsize
    unset dbsize
    unset pruningmultiplier
    unset prunedt
    unset maxdbsize
    unset pruningvalue
    unset execpruning
    unset pruningpercent
    unset lsmi
else
    if [ ! -n "$maxdbsize" ]; then
        ( crontab -l | grep -v -F "$dbpcroncmd" ) | crontab -
    fi
fi

exit 0
