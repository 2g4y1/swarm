#!/bin/bash
source /var/lib/swarm/modules/variables
source $configs/hornet.cfg
source $configs/swarm.cfg
#source $logs/dbPruner

# Get Service Status
isHealthy="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.isHealthy')"
pruningDatabaseSize=${pruningDatabaseSize//[!0-9]/}


if [ "$isHealthy" = "true" ] && [ ! -f "$logs/dbPruner.lock" ] && [ -n "$pruningDatabaseSize" ]; then
    IFS=', ' read -r -a ARRAYhornetConfigs <<< "$hornetConfigs"
    for hornetConfig in "${ARRAYhornetConfigs[@]}"
    do
        pruningValue="$(jq '.pruning.size.enabled' $hornetDir/$hornetConfig.json)"
        if [ "$pruningValue" = "true" ]; then
            sudo jq '.pruning.size.enabled = false' $hornetDir/$hornetConfig.json|sponge $hornetDir/$hornetConfig.json
            restartHornet=true
        fi
    done
    if [ "$restartHornet" = "true" ]; then
        sudo systemctl restart hornet
    fi

    # Check if enough buffer space is left
    getDiskSize=$(df -h $hornetDir/${network}db | awk '{print $2}')
    getDiskSize=$(echo $getDiskSize | awk '{print $2}')
    diskSize=${getDiskSize::-1}
    let bufferSize=$diskSize-$pruningDatabaseSize
    if [ $bufferSize -lt 10 ]; then
        let pruningDatabaseSize=$diskSize-10
        sudo sed -i 's/pruningDatabaseSize=.*/pruningDatabaseSize="'$pruningDatabaseSize'GB"/' $configs/hornet.cfg
    fi

    getDbSize="$(du -sb $hornetDir/${network}db | cut -f1)"
    let dbSize=$getDbSize/1000000
    let pruningDatabaseSize=$pruningDatabaseSize*1000
    if [ "$dbSize" -gt 0 ] && [ "$dbSize" -gt "$pruningDatabaseSize" ]; then
        # ADD LOCK
        sudo touch $logs/dbPruner.lock
        while [ $dbSize -gt $pruningDatabaseSize ] && [ "$killSwitch" != "true" ]; do
            # Start pruning process
            currentPruningIndex="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.pruningIndex')"

            # Get difference between LSMI and pruningindex
            let pruningIndex=$currentPruningIndex+51

            nodeVersion=$(hornet -v)
            if [ "$nodeVersion" = "HORNET 1.0.1" ]; then
                execPruning=`curl -s -X GET "http://localhost:14265/api/v1/control/database/prune?index=$pruningIndex" -H "accept: application/json"`
            else
                execPruning=`curl -s -X POST "http://localhost:14265/api/v1/control/database/prune" -H "Content-Type: application/json" -d '{"index": '$pruningIndex'}'`
            fi

            if [[ "$execPruning" == *"{\"data\":{\"index\":"* ]]; then
                milestonesPruned=true
            else
                killSwitch=true
            fi
        getDbSize="$(du -sb $hornetDir/${network}db | cut -f1)"
        let dbSize=$getDbSize/1000000
        done

        if [ "$killSwitch" = "true" ]; then
            pruningDate=`date '+%d-%m-%Y %H-%M-%S'`
            echo "$pruningDate [DBPRUNER] - KillSwitch triggered -> $execPruning" >> $logs/swarm.log
            # Remove LOCK
            sudo rm -rf $logs/dbPruner.lock
        fi

        if [ "$milestonesPruned" = "true" ]; then
            # pruningDate=`date '+%d-%m-%Y %H-%M-%S'`
            # sudo sed -i "s,pruningDate=.*,pruningDate=\"$pruningDate\"," $logs/dbPruner
            echo "$pruningDate [DBPRUNER] - Database pruned to milestones $pruningIndex" >> $logs/swarm.log

            # Remove LOCK
            sudo rm -rf $logs/dbPruner.lock
        fi
    fi
    unset getDbSize
    unset dbSize
    unset pruneDate
    unset pruningDatabaseSize
    unset execPruning
    unset killSwitch
# else
#     if [ ! -n "$pruningDatabaseSize" ]; then
#         ( crontab -l | grep -v -F "$dbPrunerCronCmd" ) | crontab -
#     else
#         if ! [ "$pruningDatabaseSize" -eq "$pruningDatabaseSize" ]; then
#             ( crontab -l | grep -v -F "$dbPrunerCronCmd" ) | crontab -
#         fi
#     fi
fi

unset ARRAYhornetConfigs
unset hornetConfig

exit 0
