#!/bin/bash
############################################################################################################################################################
############################################################################################################################################################
# DO NOT EDIT THE LINES BELOW !!! DO NOT EDIT THE LINES BELOW !!! DO NOT EDIT THE LINES BELOW !!! DO NOT EDIT THE LINES BELOW !!!
############################################################################################################################################################
############################################################################################################################################################

version=0.0.3

############################################################################################################################################################

source /var/lib/swarm/modules/variables

############################################################################################################################################################

# Remove old HLM version if exist
if [ -d "/etc/hlm-cfgs" ] || [ -d "/var/lib/hornet-light-manager" ]; then
    source $modules/hlmremover
fi

# Start pre-script stuff here
clear
function pause(){
   read -p "$*"
}

# Check if script is running with root permissions
if [ $(id -u) -ne 0 ]; then
    whiptail --title "Welcome to SWARM! [v$version]" --msgbox "Please run SWARM with sudo or as root" 8 78
    exit 0
fi

# Run PACKAGE module
source $modules/packages

# Run VERSION module
source $modules/versions

# Run GO module check
source $modules/gochecker

# Start main script
counter=0
while [ $counter -lt 1 ]; do
    clear
    source $configs/hornet.cfg
    source $configs/nginx.cfg
    source $configs/swarm.cfg

    # Check if SWARM log exist
    if [ ! -f "$swarmlog" ]; then
        source $modules/logcheck
    else
        source $swarmlog
    fi

    # Check if plugins are enabled and get latest stats
    if [ -f "$swarmlog" ]; then
        sudo crontab -l | grep -q $plugins/watchdog && watchdog=active || watchdog=inactive
        if [ -f "$log/watchdog.log" ]; then
            restartdt="$(cat $log/watchdog.log)"
        fi
        sudo crontab -l | grep -q $plugins/dbpruner && dbprunerstat=active || dbprunerstat=inactive
        if [ -f "$log/pruning.log" ]; then
            pruningdt="$(cat $log/pruning.log)"
        fi
    fi

    ############################################################################################################################################################

    if [ "$watchdog" = "active" ]; then
        wdstatus=enabled
    else
        if [ "$watchdog" = "inactive" ]; then
            wdstatus=disabled
        fi
    fi
    if [ "$dbprunerstat" = "active" ]; then
        dbprunerstatus=enabled
    else
        if [ "$dbprunerstat" = "inactive" ]; then
            dbprunertatus=disabled
        fi
    fi

    CHOICE=$(
        whiptail --title "Welcome to SWARM! [v$version]" --menu "Watchdog: $wdstatus\nDBPruner: $dbprunerstat\n\nChoose an option" 25 78 16 \
        "1)" "Hornet Menu" \
        "2)" "Proxy Menu" \
        "3)" "SWARM Menu" \
        "4)" "Exit."
    )

    case $CHOICE in
        "1)")
            selector=1
        ;;
        "2)")
            selector=2
        ;;
        "3)")
            selector=3
        ;;
        "4)")
            exit 0
        ;;
    esac

 ############################################################################################################################################################

    # HORNET MENU
    if [ "$selector" = "1" ]; then
        counter1=0
        while [ $counter1 -lt 1 ]; do
            CHOICE=$(
                whiptail --title "Hornet Menu" --menu "Choose an option" 25 78 16 \
                "1)" "Simple Config Editor" \
                "2)" "Edit Hornet Configs" \
                "3)" "Hornet Service (start/stop)" \
                "4)" "Hornet Service (start/stop)" \
                "5)" "Hornet Service (start/stop)" \
                "6)" "Hornet Service (start/stop)" \
                "7)" "Back..."
            )

            case $CHOICE in
                "1)")
                    selector=1
                ;;
                "2)")
                    selector=2
                ;;
                "3)")
                    selector=3
                ;;
                "4)")
                    selector=4
                ;;
                "5)")
                    selector=5
                ;;
                "6)")
                    selector=6
                ;;
                "7)")
                    selector=x
                ;;
            esac


            # Change SWARM-hornet.cfg
            if [ "$selector" = "1" ] ; then
                source $modules/currenteasycfg
                sudo nano $configs/hornet.cfg
                source $configs/hornet.cfg

                # Run Hornet cfg checker
                source $modules/cfgchecker

                # CALL MODULE CONFIGPARSER
                if [ -f "/usr/bin/hornet" ]; then
                    source $modules/configparser
                fi

                # check if a restart is required
                if [ "$restart" = "true" ]; then
                    if (whiptail --title "Hornet Menu" --yesno "Hornet configuration changes detected!\nWould you like to restart hornet now?" 8 78); then
                        sudo systemctl restart hornet
                    else
                        restart=false
                    fi
                fi
            fi

            # Edit config.json
            if [ "$selector" = "2" ] ; then
                CHOICE=$(
                    whiptail --title "Hornet Menu" --menu "Which config you want to edit" 25 78 16 \
                    "1)" "Mainnet config" \
                    "2)" "Comnet config" \
                    "3)" "Devnet config" \
                    "4)" "Peering config" \
                    "5)" "Service config" \
                    "6)" "Cancel."
                )

                case $CHOICE in
                    "1)")
                        sudo nano $hornetdir/config.json
                        if (whiptail --title "Hornet Menu" --yesno "Would you like to restart hornet now?" 8 78); then
                            sudo systemctl restart hornet
                        else
                            restart=false
                        fi
                    ;;
                    "2)")
                        sudo nano $hornetdir/config_comnet.json
                        if (whiptail --title "Hornet Menu" --yesno "Would you like to restart hornet now?" 8 78); then
                            sudo systemctl restart hornet
                        else
                            restart=false
                        fi
                    ;;
                    "3)")
                        sudo nano $hornetdir/config_devnet.json
                        if (whiptail --title "Hornet Menu" --yesno "Would you like to restart hornet now?" 8 78); then
                            sudo systemctl restart hornet
                        else
                            restart=false
                        fi
                    ;;
                    "4)")
                        whiptail --title "Hornet Menu" --msgbox "New peering configuration will be loaded automatically." 8 78
                    ;;
                    "5)")
                        sudo nano $hornetdir/config.json
                        if (whiptail --title "Hornet Menu" --yesno "Would you like to restart hornet now?" 8 78); then
                            sudo systemctl restart hornet
                        else
                            restart=false
                        fi
                    ;;
                    "6)")
                        # Nothing to do here
                    ;;
                esac
                unset selector
                unset restart
            fi

            if [ "$selector" = "3" ] ; then
                echo -e $TEXT_RED_B && read -p " Would you like to (1)restart/(2)stop/(3)status or (c)ancel: " selector1
                echo -e $text_reset
                if [ "$selector1" = "1" ]; then
                    unset selector1
                    sudo systemctl restart hornet
                    echo -e $text_yellow && echo " Hornet node (re)started!" && echo -e $text_reset
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                fi
                if [ "$selector1" = "2" ]; then
                    unset selector1
                    sudo systemctl stop hornet
                    echo -e $text_yellow " Hornet node stopped!"
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                fi
                if [ "$selector1" = "3" ]; then
                    unset selector1
                    sudo systemctl status hornet
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                fi
            fi

            if [ "$selector" = "4" ] ; then
                sudo journalctl -fu hornet | less -FRSXM
            fi

            if [ "$selector" = "5" ]; then
                echo -e $TEXT_RED_B && read -p " Would you like to delete (1)mainnetdb, (2)comnetdb, (3)devnetdb or (c)ancel: " selector_deletedb
                echo -e $text_reset
                if [ "$selector_deletedb" = "1" ]; then
                    echo -e $TEXT_RED_B && read -p " Are you sure to delete the database (y/N): " selector6
                    echo -e $text_reset
                    if [ "$selector6" = "y" ] || [ "$selector6" = "Y" ]; then
                        sudo systemctl stop hornet
                        if [ -d "$hornetdir/mainnetdb" ]; then
                            sudo rm -rf $hornetdir/mainnetdb
                        fi
                        if [ -d "$hornetdir/snapshots/mainnet" ]; then
                            sudo rm -rf $hornetdir/snapshots/mainnet/export.bin
                        fi
                        sudo systemctl start hornet
                        echo -e $text_yellow && echo " Reset of the database finished and hornet restarted!" && echo -e $text_reset
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                        echo -e $text_reset
                    fi
                fi
                if [ "$selector_deletedb" = "2" ]; then
                    echo -e $TEXT_RED_B && read -p " Are you sure to delete the database (y/N): " selector6
                    echo -e $text_reset
                    if [ "$selector6" = "y" ] || [ "$selector6" = "Y" ]; then
                        sudo systemctl stop hornet
                        if [ -d "$hornetdir/comnetdb" ]; then
                            sudo rm -rf $hornetdir/comnetdb
                        fi
                        if [ -d "$hornetdir/snapshots/comnet" ]; then
                            sudo rm -rf $hornetdir/snapshots/comnet/export.bin
                        fi
                        sudo systemctl start hornet
                        echo -e $text_yellow && echo " Reset of the database finished and hornet restarted!" && echo -e $text_reset
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                        echo -e $text_reset
                    fi
                fi
                if [ "$selector_deletedb" = "3" ]; then
                    echo -e $TEXT_RED_B && read -p " Are you sure to delete the database (y/N): " selector6
                    echo -e $text_reset
                    if [ "$selector6" = "y" ] || [ "$selector6" = "Y" ]; then
                        sudo systemctl stop hornet
                        if [ -d "$hornetdir/devnetdb" ]; then
                            sudo rm -rf $hornetdir/devnetdb
                        fi
                        if [ -d "$hornetdir/snapshots/devnet" ]; then
                            sudo rm -rf $hornetdir/snapshots/devnet/export.bin
                        fi
                        sudo systemctl start hornet
                        echo -e $text_yellow && echo " Reset of the database finished and hornet restarted!" && echo -e $text_reset
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                        echo -e $text_reset
                    fi
                fi
            fi

            if [ "$selector" = "6" ] ; then
                echo -e $TEXT_RED_B && read -p " Would you like to (1)update, (2)install, (3)remove Hornet or press any other key to cancel: " selector
                echo -e $text_reset
                # Update Hornet
                if [ "$selector" = "1" ] ; then
                    sync="$(curl -s http://127.0.0.1:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{"command": "getNodeInfo"}' | jq '.isSynced')"
                    if [ "$sync" = "true" ] || [ "$sync" = "false" ]; then
                        echo -e $text_yellow " Checking if a new version is available..."
                        # Run VERSION module
                        source $modules/versions
                        if [ "$nodeversion" = "HORNET $latesthornet" ]; then
                            echo -e "$text_green Already up to date."
                        else
                            echo -e $text_red " New Hornet version found... $text_red(v$latesthornet)"
                            echo -e $text_yellow " Stopping Hornet node...(Please note that this may take some time)"
                            sudo systemctl stop hornet
                            echo -e $text_yellow " Updating Hornet..."
                            sudo apt update && sudo apt-get -y -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confnew install hornet

                            # Check if a new config exist after updating
                            if [ -f "$hornetdir/config.json.dpkg-dist" ]; then
                                sudo cp -r $hornetdir/config.json.dpkg-dist $hornetdir/config.json
                                sudo rm -rf $hornetdir/config.json.dpkg*
                            fi
                            if [ -f "$hornetdir/config_comnet.json.dpkg-dist" ]; then
                                sudo cp -r $hornetdir/config_comnet.json.dpkg-dist $hornetdir/config_comnet.json
                                sudo rm -rf $hornetdir/config_comnet.json.dpkg*
                            fi
                            if [ -f "$hornetdir/config_devnet.json.dpkg-dist" ]; then
                                sudo cp -r $hornetdir/config_devnet.json.dpkg-dist $hornetdir/config_devnet.json
                                sudo rm -rf $hornetdir/config_devnet.json.dpkg*
                            fi

                            # CALL MODULE CONFIGPARSER
                            source $modules/configparser

                            echo -e $text_yellow " Starting Hornet node..."
                            sudo systemctl start hornet
                            echo -e $text_yellow " Updating Hornet version finished!"
                            echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                            echo -e $text_reset
                        fi
                    else
                        echo -e "$text_red Error! Please try again later."
                    fi
                fi
                # Install Hornet
                if [ "$selector" = "2" ]; then
                    if [ ! -f "/usr/bin/hornet" ]; then
                        source $configs/hornet.cfg
                        sudo snap install go --channel=1.15/stable --classic
                        sudo wget -qO - https://ppa.hornet.zone/pubkey.txt | sudo apt-key add -
                        if [ "$release" = "stable" ]; then
                            sudo sh -c 'echo "deb http://ppa.hornet.zone stable main" > /etc/apt/sources.list.d/hornet.list'
                        fi
                        if [ "$release" = "testing" ]; then
                            sudo sh -c 'echo "deb http://ppa.hornet.zone stable main" > /etc/apt/sources.list.d/hornet.list'
                            sudo sh -c 'echo "deb http://ppa.hornet.zone testing main" >> /etc/apt/sources.list.d/hornet.list'
                            sudo sh -c 'echo "deb http://ppa.hornet.zone alpha main" >> /etc/apt/sources.list.d/hornet.list'
                        fi
                        sudo apt update && sudo apt dist-upgrade -y && sudo apt upgrade -y && sudo apt install hornet -y

                        # Check which network
                        if [ "$network" = "mainnet" ]; then
                            echo "" > /etc/default/hornet
                            restart=true
                        fi
                        if [ "$network" = "comnet" ]; then
                            echo "OPTIONS=\"--config config_comnet --overwriteCooAddress\"" > /etc/default/hornet
                            restart=true
                        fi
                        if [ "$network" = "devnet" ]; then
                            echo "OPTIONS=\"--config config_devnet --overwriteCooAddress\"" > /etc/default/hornet
                            restart=true
                        fi

                        if [ -f "/usr/bin/hornet" ]; then
                            # CALL MODULE CONFIGPARSER
                            source $modules/configparser

                            check="$(systemctl show -p ActiveState --value hornet)"
                            if [ "$check" != "active" ]; then
                                sudo systemctl restart hornet
                            fi
                            if [ "$restart" = "true" ]; then
                                sudo systemctl restart hornet
                                unset restart
                            fi
                            echo ""
                            echo -e $TEXT_RED_B
                            echo " You need to open the following ports in your home router for peering"
                            echo " Ports: $autopeeringport/UDP & $neighborport/tcp"
                            echo ""
                            echo -e $text_yellow
                            echo " Hornet installation finished!"
                        else
                            echo -e $TEXT_RED_B ""
                            echo " Error while installing Hornet. Please check hornet.cfg and try again!"
                            echo ""
                        fi
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...' && echo -e $text_reset
                    else
                        echo -e $text_red " Hornet already installed. Please remove first!"
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...' && echo -e $text_reset
                    fi
                fi
                # Remove Hornet
                if [ "$selector" = "3" ]; then
                    echo -e $TEXT_RED_B && read -p " Are you sure you want to remove Hornet (y/N): " selector_hornetremove
                    echo -e $text_reset
                    if [ "$selector_hornetremove" = "y" ] || [ "$selector_hornetremove" = "Y" ]; then
                        ( crontab -l | grep -v -F "$croncmd" ) | crontab -
                        ( crontab -l | grep -v -F "$dbpcroncmd" ) | crontab -
                        sudo systemctl stop hornet
                        sudo apt purge hornet -y
                        echo -e $text_red " Hornet was successfully removed!"
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                        echo -e $text_reset
                    fi
                fi
                unset selector
            fi

            if [ "$selector" = "x" ] || [ "$selector" = "X" ]; then
                counter1=1
            fi
        done
        unset selector
    fi

############################################################################################################################################################

    if [ "$selector" = "2" ] ; then
        counter2=0
        while [ $counter2 -lt 1 ]; do
            clear
            echo ""
            echo -e $text_red "\033[1m\033[4mProxy Menu\033[0m"
            echo -e $text_yellow ""
            echo " 1) Edit Nginx.cfg"
            echo ""
            echo " 2) Edit auth users"
            echo " 3) Add new auth user"
            echo ""
            echo " 4) Deploy reverse proxy"
            echo " 5) Renew SSL Certificate"
            echo ""
            echo -e "\e[90m-----------------------------------------------------------"
            echo ""
            echo -e $text_yellow "x) Back"
            echo ""
            echo -e "\e[90m==========================================================="
            echo -e $text_yellow && read -p " Please type in your option: " selector
            echo -e $text_reset

            # Change nginx.cfg
            if [ "$selector" = "1" ] ; then
                sudo nano $configs/nginx.cfg
                source $configs/nginx.cfg
                echo -e $text_yellow && echo " Edit configuration finished!" && echo -e $text_reset
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            # Update auth user
            if [ "$selector" = "2" ]; then
                if [ -d "/etc/nginx" ]; then
                    source $modules/edituserproxy
                else
                    echo -e $text_red " Please install nginx first!"
                fi
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            # Add new auth user
            if [ "$selector" = "3" ]; then
                if [ -d "/etc/nginx" ]; then
                    source $modules/adduserproxy
                else
                    echo -e $text_red " Please install nginx first!"
                fi
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            # Run the nginx module for SWARM
            if [ "$selector" = "4" ]; then
                source $modules/nginx
            fi

            # Manual renew certificate if installed
            if [ "$selector" = "5" ]; then
                if [ -f "/etc/letsencrypt/live/$domain/fullchain.pem" ]; then
                    sudo certbot renew
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                else
                    echo -e $text_red " Error! No SSL Certificate installed!"
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                fi
            fi

            if [ "$selector" = "x" ] || [ "$selector" = "X" ]; then
                counter2=1
            fi
        done
        unset selector
    fi

############################################################################################################################################################

    if [ "$selector" = "3" ]; then
        counter3=0
        while [ $counter3 -lt 1 ]; do
            clear
            echo ""
            echo -e $text_red " \033[1m\033[4mSWARM Menu\033[0m"
            echo -e $text_yellow ""
            echo " 1) Edit SWARM.cfg"
            echo ""
            echo " 2) Manage Watchdog"
            echo ""
            echo " 3) Manage DBPruner"
            echo ""
            echo " 4) Update SWARM"
            echo ""
            echo -e " \e[90m-----------------------------------------------------------"
            echo ""
            echo -e $text_yellow "x) Back"
            echo ""
            echo -e " \e[90m==========================================================="
            echo -e $text_yellow && read -p " Please type in your option: " selector
            echo -e $text_reset

            # Change SWARM.cfg
            if [ "$selector" = "1" ] ; then
                sudo nano $configs/swarm.cfg
                echo -e $text_yellow && echo " Edit configuration finished!" && echo -e $text_reset
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            if [ "$selector" = "2" ]; then
                echo -e $TEXT_RED_B && read -p " Would you like to (1)enable/(2)disable or (c)ancel the SWARM watchdog: " selector_watchdog
                echo -e $text_reset
                if [ "$selector_watchdog" = "1" ]; then
                    echo -e $text_yellow && echo " Enable hornet watchdog..." && echo -e $text_reset
                    sudo mkdir -p $swarmdir/log
                    sudo echo "0" > $swarmdir/log/watchdog.log
                    sudo chmod +x $plugins/watchdog
                    ( crontab -l | grep -v -F "$croncmd" ; echo "$cronjob" ) | crontab -
                fi
                if [ "$selector_watchdog" = "2" ]; then
                    echo -e $text_yellow && echo " Disable hornet watchdog..." && echo -e $text_reset
                    ( crontab -l | grep -v -F "$croncmd" ) | crontab -
                fi
                echo -e $text_yellow && echo " Hornet watchdog configuration finished!" && echo -e $text_reset
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi
            
            if [ "$selector" = "3" ]; then
                echo -e $TEXT_RED_B && read -p " Would you like to (1)enable/(2)disable or (c)ancel the DBPruner: " selector_dbpruner
                echo -e $text_reset
                if [ "$selector_dbpruner" = "1" ]; then
                    echo -e $text_yellow && echo " Enable DBPruner..." && echo -e $text_reset
                    sudo mkdir -p $swarmdir/log
                    if [ ! -f "$swarmdir/log/pruning.log" ]; then
                        {
                            echo "1"
                            echo ""
                        } > $swarmdir/log/pruning.log
                    fi
                    sudo chmod +x $plugins/dbpruner
                    ( crontab -l | grep -v -F "$dbpcroncmd" ; echo "$dbpcronjob" ) | crontab -
                fi
                if [ "$selector_dbpruner" = "2" ]; then
                    echo -e $text_yellow && echo " Disable DBPruner..." && echo -e $text_reset
                    ( crontab -l | grep -v -F "$dbpcroncmd" ) | crontab -
                    if [ -f "$swarmdir/log/pruning.log" ]; then
                        {
                            echo "1"
                            echo ""
                        } > $swarmdir/log/pruning.log
                    fi
                fi
                echo -e $text_yellow && echo " DBPruner configuration finished!" && echo -e $text_reset
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            if [ "$selector" = "4" ]; then
                echo -e $TEXT_RED_B && read -p " Are you sure you want to update SWARM (y/N): " selector_swarmreset
                if [ "$selector_swarmreset" = "y" ] || [ "$selector_swarmreset" = "Y" ]; then
                    ( cd $swarmdir ; sudo git pull ) > /dev/null 2>&1
                    ( cd $swarmdir ; sudo git reset --hard origin/$branch ) > /dev/null 2>&1
                    sudo chmod +x $swarmdir/swarm $plugins/watchdog $plugins/dbpruner
                    source $modules/updater
                    echo ""
                    echo -e $text_red " SWARM update successfully!"
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...' && echo -e $text_reset
                    clear
                    exit 0
                fi
            fi

            if [ "$selector" = "9" ]; then
                echo -e $TEXT_RED_B "Current branch: $branch" && echo -e $text_reset
                echo -e $TEXT_RED_B && read -p " In which branch you want so switch: " selector_branch
                if [ "$selector_branch" = "master" ] || [ "$selector_branch" = "develop" ]; then
                    # Check SWARM branch
                    if [ "$branch" != "$selector_branch" ]; then
                        ( cd $swarmdir ; sudo git reset --hard origin/$branch ) > /dev/null 2>&1
                        ( cd $swarmdir ; sudo git checkout $selector_branch ) > /dev/null 2>&1
                        ( cd $swarmdir ; sudo git pull ) > /dev/null 2>&1
                        branch=$selector_branch
                        sudo chmod +x $swarmdir/swarm $plugins/watchdog $plugins/dbpruner
                        source $modules/updater
                        echo ""
                        echo -e $text_red " SWARM branch change detected!"
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to exit SWARM...' && echo -e $text_reset
                        clear
                        exit 0
                    fi
                else
                    echo -e $text_red " No valid branch selected!"
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...' && echo -e $text_reset
                fi
            fi

            if [ "$selector" = "x" ] || [ "$selector" = "X" ]; then
                counter3=1
            fi
        done
        unset selector
    fi

############################################################################################################################################################

    if [ "$selector" = "x" ] || [ "$selector" = "X" ]; then
        counter=1
    fi
done
counter=0
clear
exit 0
