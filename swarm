#!/bin/bash
############################################################################################################################################################
############################################################################################################################################################
# DO NOT EDIT THE LINES BELOW !!! DO NOT EDIT THE LINES BELOW !!! DO NOT EDIT THE LINES BELOW !!! DO NOT EDIT THE LINES BELOW !!!
############################################################################################################################################################
############################################################################################################################################################

version=0.0.1

############################################################################################################################################################

source /var/lib/swarm/modules/variables

############################################################################################################################################################

# Remove old HLM version if exist
if [ -d "/etc/hlm-cfgs" ] || [ -d "/var/lib/hornet-light-manager" ]; then
    source $modules/hlmremover
fi

clear
function pause(){
   read -p "$*"
}

# Check if script is running with root permissions
if [ $(id -u) -ne 0 ]; then
    echo -e $TEXT_RED_B "Please run SWARM with sudo or as root"
    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
    echo -e $text_reset
    exit 0
fi

# Run PACKAGE module
source $modules/packages

# Run VERSION module
source $modules/versions

# Run GO module check
source $modules/gochecker

# Start main script
counter=0
while [ $counter -lt 1 ]; do
    clear
    source $configs/hornet.cfg
    source $configs/nginx.cfg
    source $configs/watchdog.cfg
    source $envfile

    # Check sync status of the node
    sync="$(curl -s http://127.0.0.1:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{"command": "getNodeInfo"}' | jq '.isSynced')"

    # Check if watchdog was enabled and get latest stats
    if [ -f "$swarmdir/log/watchdog.log" ]; then
        sudo crontab -l | grep -q $plugins/watchdog && watchdog=active || watchdog=inactive
        watchdogcount="$(cat $swarmdir/log/watchdog.log | sed -n -e '1{p;q}')"
        watchdogtime="$(cat $swarmdir/log/watchdog.log | sed -n -e '2{p;q}')"
    fi

    ############################################################################################################################################################

    echo ""
    echo -e $text_yellow "\033[1m\033[4mWelcome to SWARM! [v$version]\033[0m"
    echo ""
    if [ "$latestswarm" != "$version" ] && [ "$latestswarm" != "" ]; then
        echo -e $text_red "#####################################################"
        echo -e $text_red " New version v$latestswarm available, please update SWARM!"
        echo -e $text_red "#####################################################"
        echo ""
    fi
#    if [ -n "$nodeversion" ] && [ -n "$latesthornet" ]; then
#        if [ "$nodeversion" = "$latesthornet" ]; then
#            echo -e "$text_yellow Hornet Version:$text_green $nodeversion"
#        else
#            echo -e "$text_yellow Hornet Version:$text_red $nodeversion"
#        fi
#    else
#        echo -e "$text_yellow Hornet Version:$text_red N/A"
#    fi
#    if [ "$sync" = "true" ] || [ "$sync" = "false" ]; then
#        if [ "$sync" = "true" ]; then
#            echo -e "$text_yellow Hornet Status:$text_green synced"
#        else
#            echo -e "$text_yellow Hornet Status:$text_red not synced"
#        fi
#    else
#        echo -e "$text_yellow Hornet Status:$text_red N/A"
#    fi
#    echo ""
    if [ "$watchdog" = "active" ] || [ "$watchdog" = "inactive" ]; then
        if [ "$watchdog" != "active" ]; then
            echo -e "$text_yellow Watchdog:$text_red $watchdog"
        else
            echo -e "$text_yellow Watchdog:$text_green $watchdog"
            if [ "$watchdogcount" -gt "0" ]; then
#                echo -e "$text_yellow Restarts:$text_red $watchdogcount"
                if [ -n "$watchdogtime" ]; then
                    echo -e "$text_yellow Last restart: $watchdogtime"
                fi
                echo ""
            fi
            # Autoupdate
            if [ "$autoupdate" = "true" ]; then
                echo -e "$text_yellow Auto-updater:$text_green enabled"
            else
                echo -e "$text_yellow Auto-updater:$text_red disabled"
            fi
            # Sync Check
            if [ "$checksync" = "true" ]; then
                echo -e "$text_yellow Sync-checker:$text_green enabled"
            else
                echo -e "$text_yellow Sync-checker:$text_red disabled"
            fi
            # Log Pruning
            if [ "$logpruning" = "true" ]; then
                echo -e "$text_yellow Log-pruner:$text_green enabled"
            else
                echo -e "$text_yellow Log-pruner:$text_red disabled"
            fi
        fi
    else
        echo -e "$text_yellow Watchdog:$text_red inactive"
    fi
    echo ""
    echo -e "\e[90m==========================================================="
    echo ""
    echo -e $text_red "\033[1m\033[4mManagement\033[0m"
    echo ""
    echo -e $text_yellow
    echo " 1) Hornet Menu"
    echo ""
    echo " 2) Proxy Menu"
    echo ""
    echo " 3) SWARM Menu"
    echo ""
    echo -e "\e[90m-----------------------------------------------------------"
    echo ""
    echo -e $text_yellow "x) Exit"
    echo ""
    echo -e "\e[90m==========================================================="
    echo -e $text_yellow && read -t 60 -p " Please type in your option: " selector
    echo -e $text_reset

    if [ "$selector" = "1" ]; then
        counter1=0
        while [ $counter1 -lt 1 ]; do
            clear
            echo ""
            echo -e $text_red "\033[1m\033[4mHornet Menu\033[0m"
            echo -e $text_yellow ""
            echo " 1) Simple Config Editor"
            echo " 2) Edit Hornet Configs"
            echo ""
            echo " 3) Hornet Service (start/stop)"
            echo " 4) Show latest node log"
            echo " 5) Reset database"
            echo ""
            echo " 6) Hornet Installer"
            echo ""
            echo -e "\e[90m-----------------------------------------------------------"
            echo ""
            echo -e $text_yellow "x) Back"
            echo ""
            echo -e "\e[90m==========================================================="
            echo -e $text_yellow && read -p " Please type in your option: " selector
            echo -e $text_reset

            # Change SWARM-hornet.cfg
            if [ "$selector" = "1" ] ; then
                currentrelease=$release
                currentnetwork=$network
                sudo nano $configs/hornet.cfg
                source $configs/hornet.cfg

                # Write selected release to config
                if [ "$release" = "stable" ]; then
                    sudo sh -c 'echo "deb http://ppa.hornet.zone stable main" > /etc/apt/sources.list.d/hornet.list'
                fi
                if [ "$release" = "testing" ]; then
                    sudo sh -c 'echo "deb http://ppa.hornet.zone stable main" > /etc/apt/sources.list.d/hornet.list'
                    sudo sh -c 'echo "deb http://ppa.hornet.zone testing main" >> /etc/apt/sources.list.d/hornet.list'
                    sudo sh -c 'echo "deb http://ppa.hornet.zone alpha main" >> /etc/apt/sources.list.d/hornet.list'
                fi

                # Check if release is changed
                if [ "$release" != "$currentrelease" ]; then
                    echo ""
                    echo -e $TEXT_RED_B " Release change detected!!!" && echo -e $text_reset
                    echo ""
                    echo -e $text_yellow && read -p " Would you like to re-install hornet now (y/N): " selector_releasechange
                    echo -e $text_reset
                    if [ "$selector_releasechange" = "y" ] || [ "$selector_releasechange" = "Y" ]; then
                        sudo apt purge hornet -y
                        sudo apt update && sudo apt dist-upgrade -y && sudo apt upgrade -y
                        sudo apt install hornet -y
                        check="$(systemctl show -p ActiveState --value hornet)"
                        if [ "$check" != "active" ]; then
                            sudo systemctl restart hornet
                        fi
                        echo ""
                        echo -e $text_red " Hornet re-installation finished!"
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                        echo -e $text_reset
                    fi
                echo ""
                fi

                # Check if network changed
                if [ "$network" != "$currentnetwork" ]; then
                    echo ""
                    echo -e $TEXT_RED_B " Network change detected!!!" && echo -e $text_reset
                    if [ "$network" = "mainnet" ]; then
                        echo "" > /etc/default/hornet
                    fi
                    if [ "$network" = "comnet" ]; then
                        echo "OPTIONS=\"--config config_comnet --overwriteCooAddress\"" > /etc/default/hornet
                    fi
                    if [ "$network" = "devnet" ]; then
                        echo "OPTIONS=\"--config config_devnet --overwriteCooAddress\"" > /etc/default/hornet
                    fi
                    sudo rm -rf $hornetdir/snapshots/mainnet/export.bin $hornetdir/snapshots/comnet/export.bin $hornetdir/snapshots/devnet/export.bin $hornetdir/export.bin $hornetdir/export_comnet.bin $hornetdir/export_devnet.bin
                    restart=true
                    echo ""
                    echo -e $text_red " Hornet network change finished!"
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                    echo ""
                fi

                # CALL MODULE CONFIGPARSER
                source $modules/configparser

                # check if a restart is required
                if [ "$restart" = "true" ]; then
                    echo ""
                    echo -e $TEXT_RED_B "Hornet configuration changes detected!" && echo -e $text_reset
                    echo ""
                    echo -e $text_yellow && read -p " Would you like to restart hornet now (y/N): " selector_restart
                    echo -e $text_reset
                    if [ "$selector_restart" = "y" ] || [ "$selector_restart" = "Y" ]; then
                        sudo systemctl restart hornet
                    fi
                    restart=false
                fi
                echo -e $text_yellow && echo " Edit configuration finished!" && echo -e $text_reset
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            # Edit config.json
            if [ "$selector" = "2" ] ; then
                echo -e $TEXT_RED_B && read -p " Would you like to edit the (1)mainnet, (2)comnet, (3)devnet, (4)peering or the (5)service config: " selector
                if [ "$selector" = "1" ]; then
                    sudo nano $hornetdir/config.json
                    echo -e $TEXT_RED_B && read -p " Would you like to restart hornet now (y/N): " restart
                fi
                if [ "$selector" = "2" ]; then
                    sudo nano $hornetdir/config_comnet.json
                    echo -e $TEXT_RED_B && read -p " Would you like to restart hornet now (y/N): " restart
                fi
                if [ "$selector" = "3" ]; then
                    sudo nano $hornetdir/config_devnet.json
                    echo -e $TEXT_RED_B && read -p " Would you like to restart hornet now (y/N): " restart
                fi
                if [ "$selector" = "4" ]; then
                    sudo nano $hornetdir/peering.json
                    echo -e $text_yellow && echo " New peering configuration loaded!" && echo -e $text_reset
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                fi
                if [ "$selector" = "5" ]; then
                    sudo nano /etc/default/hornet
                    echo -e $TEXT_RED_B && read -p " Would you like to restart hornet now (y/N): " restart
                fi
                if [ "$restart" = "y" ] || [ "$restart" = "y" ]; then
                    sudo systemctl restart hornet
                    echo -e $text_yellow && echo " Hornet node restarted!" && echo -e $text_reset
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                fi
                unset selector
                unset restart
            fi

            if [ "$selector" = "3" ] ; then
                echo -e $TEXT_RED_B && read -p " Would you like to (1)restart/(2)stop/(3)status or (c)ancel: " selector1
                echo -e $text_reset
                if [ "$selector1" = "1" ]; then
                    unset selector1
                    sudo systemctl restart hornet
                    echo -e $text_yellow && echo " Hornet node (re)started!" && echo -e $text_reset
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                fi
                if [ "$selector1" = "2" ]; then
                    unset selector1
                    sudo systemctl stop hornet
                    echo -e $text_yellow " Hornet node stopped!"
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                fi
                if [ "$selector1" = "3" ]; then
                    unset selector1
                    sudo systemctl status hornet
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                fi
            fi

            if [ "$selector" = "4" ] ; then
                sudo journalctl -fu hornet | less -FRSXM
            fi

            if [ "$selector" = "5" ]; then
                echo -e $TEXT_RED_B && read -p " Would you like to delete (1)mainnetdb, (2)comnetdb, (3)devnetdb or (c)ancel: " selector_deletedb
                echo -e $text_reset
                if [ "$selector_deletedb" = "1" ]; then
                    echo -e $TEXT_RED_B && read -p " Are you sure to delete the database (y/N): " selector6
                    echo -e $text_reset
                    if [ "$selector6" = "y" ] || [ "$selector6" = "Y" ]; then
                        sudo systemctl stop hornet
                        if [ -d "$hornetdir/mainnetdb" ]; then
                            sudo rm -rf $hornetdir/mainnetdb
                        fi
                        if [ -d "$hornetdir/snapshots/mainnet" ]; then
                            sudo rm -rf $hornetdir/snapshots/mainnet/export.bin
                        fi
                        sudo systemctl start hornet
                        echo -e $text_yellow && echo " Reset of the database finished and hornet restarted!" && echo -e $text_reset
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                        echo -e $text_reset
                    fi
                fi
                if [ "$selector_deletedb" = "2" ]; then
                    echo -e $TEXT_RED_B && read -p " Are you sure to delete the database (y/N): " selector6
                    echo -e $text_reset
                    if [ "$selector6" = "y" ] || [ "$selector6" = "Y" ]; then
                        sudo systemctl stop hornet
                        if [ -d "$hornetdir/comnetdb" ]; then
                            sudo rm -rf $hornetdir/comnetdb
                        fi
                        if [ -d "$hornetdir/snapshots/comnet" ]; then
                            sudo rm -rf $hornetdir/snapshots/comnet/export.bin
                        fi
                        sudo systemctl start hornet
                        echo -e $text_yellow && echo " Reset of the database finished and hornet restarted!" && echo -e $text_reset
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                        echo -e $text_reset
                    fi
                fi
                if [ "$selector_deletedb" = "3" ]; then
                    echo -e $TEXT_RED_B && read -p " Are you sure to delete the database (y/N): " selector6
                    echo -e $text_reset
                    if [ "$selector6" = "y" ] || [ "$selector6" = "Y" ]; then
                        sudo systemctl stop hornet
                        if [ -d "$hornetdir/devnetdb" ]; then
                            sudo rm -rf $hornetdir/devnetdb
                        fi
                        if [ -d "$hornetdir/snapshots/devnet" ]; then
                            sudo rm -rf $hornetdir/snapshots/devnet/export.bin
                        fi
                        sudo systemctl start hornet
                        echo -e $text_yellow && echo " Reset of the database finished and hornet restarted!" && echo -e $text_reset
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                        echo -e $text_reset
                    fi
                fi
            fi

            if [ "$selector" = "6" ] ; then
                echo -e $TEXT_RED_B && read -p " Would you like to (1)update, (2)install, (3)remove Hornet or press any other key to cancel: " selector
                echo -e $text_reset
                # Update Hornet
                if [ "$selector" = "1" ] ; then
                    if [ "$sync" = "true" ] || [ "$sync" = "false" ]; then
                        echo -e $text_yellow " Checking if a new version is available..."
                        # Run VERSION module
                        source $modules/versions
                        if [ "$nodeversion" = "HORNET $latesthornet" ]; then
                            echo -e "$text_green Already up to date."
                        else
                            echo -e $text_red " New Hornet version found... $text_red(v$latesthornet)"
                            echo -e $text_yellow " Stopping Hornet node...(Please note that this may take some time)"
                            sudo systemctl stop hornet
                            echo -e $text_yellow " Updating Hornet..."
                            sudo apt update && sudo apt-get -y -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confnew install hornet

                            # Check if a new config exist after updating
                            if [ -f "$hornetdir/config.json.dpkg-dist" ]; then
                                sudo cp -r $hornetdir/config.json.dpkg-dist $hornetdir/config.json
                                sudo rm -rf $hornetdir/config.json.dpkg-dist
                            fi
                            if [ -f "$hornetdir/config_comnet.json.dpkg-dist" ]; then
                                sudo cp -r $hornetdir/config_comnet.json.dpkg-dist $hornetdir/config_comnet.json
                                sudo rm -rf $hornetdir/config_comnet.json.dpkg-dist
                            fi
                            if [ -f "$hornetdir/config_devnet.json.dpkg-dist" ]; then
                                sudo cp -r $hornetdir/config_devnet.json.dpkg-dist $hornetdir/config_devnet.json
                                sudo rm -rf $hornetdir/config_devnet.json.dpkg-dist
                            fi

                            # CALL MODULE CONFIGPARSER
                            source $modules/configparser

                            echo -e $text_yellow " Starting Hornet node..."
                            sudo systemctl start hornet
                            echo -e $text_yellow " Updating Hornet version finished!"
                            echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                            echo -e $text_reset
                        fi
                    else
                        echo -e "$text_red Error! Please try again later."
                    fi
                fi
                # Install Hornet
                if [ "$selector" = "2" ]; then
                    if [ ! -f "/usr/bin/hornet" ]; then
                        source $configs/hornet.cfg
                        sudo snap install go --channel=1.15/stable --classic
                        sudo wget -qO - https://ppa.hornet.zone/pubkey.txt | sudo apt-key add -
                        if [ "$release" = "stable" ]; then
                            sudo sh -c 'echo "deb http://ppa.hornet.zone stable main" > /etc/apt/sources.list.d/hornet.list'
                        fi
                        if [ "$release" = "testing" ]; then
                            sudo sh -c 'echo "deb http://ppa.hornet.zone stable main" > /etc/apt/sources.list.d/hornet.list'
                            sudo sh -c 'echo "deb http://ppa.hornet.zone testing main" >> /etc/apt/sources.list.d/hornet.list'
                            sudo sh -c 'echo "deb http://ppa.hornet.zone alpha main" >> /etc/apt/sources.list.d/hornet.list'
                        fi
                        sudo apt update && sudo apt dist-upgrade -y && sudo apt upgrade -y
                        sudo apt install hornet -y

                        # Check which network
                        if [ "$network" = "mainnet" ]; then
                            echo "" > /etc/default/hornet
                            sudo rm -rf $hornetdir/snapshots/*
                            restart=true
                        fi
                        if [ "$network" = "comnet" ]; then
                            echo "OPTIONS=\"--config config_comnet --overwriteCooAddress\"" > /etc/default/hornet
                            sudo rm -rf $hornetdir/snapshots/*
                            restart=true
                        fi
                        if [ "$network" = "devnet" ]; then
                            echo "OPTIONS=\"--config config_devnet --overwriteCooAddress\"" > /etc/default/hornet
                            sudo rm -rf $hornetdir/snapshots/*
                            restart=true
                        fi

                        # CALL MODULE CONFIGPARSER
                        source $modules/configparser

                        if [ -f /usr/bin/hornet ]; then
                            check="$(systemctl show -p ActiveState --value hornet)"
                            if [ "$check" != "active" ]; then
                                sudo systemctl restart hornet
                            fi
                            if [ "$restart" = "true" ]; then
                                sudo systemctl restart hornet
                                unset restart
                            fi
                            echo ""
                            echo -e $TEXT_RED_B
                            echo " You need to open the following ports in your home router for peering"
                            echo " Ports: $autopeeringport/UDP & $neighborport/tcp"
                            echo ""
                            echo -e $text_yellow
                            echo " Hornet installation finished!"
                        else
                            echo -e $TEXT_RED_B ""
                            echo " Error while installing Hornet. Please check hornet.cfg and try again!"
                            echo ""
                        fi
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...' && echo -e $text_reset
                    else
                        echo -e $text_red " Hornet already installed. Please remove first!"
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...' && echo -e $text_reset
                    fi
                fi
                # Remove Hornet
                if [ "$selector" = "3" ]; then
                    echo -e $TEXT_RED_B && read -p " Are you sure you want to remove Hornet (y/N): " selector_hornetremove
                    echo -e $text_reset
                    if [ "$selector_hornetremove" = "y" ] || [ "$selector_hornetremove" = "Y" ]; then
                        ( crontab -l | grep -v -F "$croncmd" ) | crontab -
                        ( crontab -l | grep -v -F "$croncmdswarm" ) | crontab -
                        sudo systemctl stop hornet
                        sudo apt purge hornet -y
                        echo -e $text_red " Hornet was successfully removed!"
                        echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                        echo -e $text_reset
                    fi
                fi
                unset selector
            fi

            if [ "$selector" = "x" ] || [ "$selector" = "X" ]; then
                counter1=1
            fi
        done
        unset selector
    fi

############################################################################################################################################################

    if [ "$selector" = "2" ] ; then
        counter2=0
        while [ $counter2 -lt 1 ]; do
            clear
            echo ""
            echo -e $text_red "\033[1m\033[4mProxy Menu\033[0m"
            echo -e $text_yellow ""
            echo " 1) Edit Nginx.cfg"
            echo ""
            echo " 2) Edit auth users"
            echo " 3) Add new auth user"
            echo ""
            echo " 4) Deploy reverse proxy"
            echo " 5) Renew SSL Certificate"
            echo ""
            echo -e "\e[90m-----------------------------------------------------------"
            echo ""
            echo -e $text_yellow "x) Back"
            echo ""
            echo -e "\e[90m==========================================================="
            echo -e $text_yellow && read -p " Please type in your option: " selector
            echo -e $text_reset

            # Change nginx.cfg
            if [ "$selector" = "1" ] ; then
                sudo nano $configs/nginx.cfg
                source $configs/nginx.cfg
                echo -e $text_yellow && echo " Edit configuration finished!" && echo -e $text_reset
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            # Update auth user
            if [ "$selector" = "2" ]; then
                if [ -d "/etc/nginx" ]; then
                    source $modules/edituserproxy
                else
                    echo -e $text_red " Please install nginx first!"
                fi
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            # Add new auth user
            if [ "$selector" = "3" ]; then
                if [ -d "/etc/nginx" ]; then
                    source $modules/adduserproxy
                else
                    echo -e $text_red " Please install nginx first!"
                fi
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            # Run the nginx module for SWARM
            if [ "$selector" = "4" ]; then
                source $modules/nginx
            fi

            # Manual renew certificate if installed
            if [ "$selector" = "5" ]; then
                if [ -f "/etc/letsencrypt/live/$domain/fullchain.pem" ]; then
                    sudo certbot renew
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                else
                    echo -e $text_red " Error! No SSL Certificate installed!"
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                    echo -e $text_reset
                fi
            fi

            if [ "$selector" = "x" ] || [ "$selector" = "X" ]; then
                counter2=1
            fi
        done
        unset selector
    fi

############################################################################################################################################################

    if [ "$selector" = "3" ]; then
        counter3=0
        while [ $counter3 -lt 1 ]; do
            clear
            echo ""
            echo -e $text_red " \033[1m\033[4mSWARM Menu\033[0m"
            echo -e $text_yellow ""
            echo " 1) Edit Watchdog.cfg"
            echo ""
            echo " 2) Manage Watchdog"
            echo ""
            echo " 3) Update SWARM"
            echo ""
            echo -e " \e[90m-----------------------------------------------------------"
            echo ""
            echo -e $text_yellow "x) Back"
            echo ""
            echo -e " \e[90m==========================================================="
            echo -e $text_yellow && read -p " Please type in your option: " selector
            echo -e $text_reset

            # Change watchdog.cfg
            if [ "$selector" = "1" ] ; then
                sudo nano $configs/watchdog.cfg
                echo -e $text_yellow && echo " Edit configuration finished!" && echo -e $text_reset
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            if [ "$selector" = "2" ]; then
                echo -e $TEXT_RED_B && read -p " Would you like to (1)enable/(2)disable or (c)ancel hornet watchdog: " selector_watchdog
                echo -e $text_reset
                if [ "$selector_watchdog" = "1" ]; then
                    echo -e $text_yellow && echo " Enable hornet watchdog..." && echo -e $text_reset
                    sudo mkdir -p $swarmdir/log
                    sudo echo "0" > $swarmdir/log/watchdog.log
                    sudo chmod +x $plugins/watchdog
                    ( crontab -l | grep -v -F "$croncmd" ; echo "$cronjob" ) | crontab -
                fi
                if [ "$selector_watchdog" = "2" ]; then
                    echo -e $text_yellow && echo " Disable hornet watchdog..." && echo -e $text_reset
                    ( crontab -l | grep -v -F "$croncmd" ) | crontab -
                fi
                echo -e $text_yellow && echo " Hornet watchdog configuration finished!" && echo -e $text_reset
                echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...'
                echo -e $text_reset
            fi

            if [ "$selector" = "3" ]; then
                echo -e $TEXT_RED_B && read -p " Are you sure you want to update SWARM (y/N): " selector_swarmreset
                if [ "$selector_swarmreset" = "y" ] || [ "$selector_swarmreset" = "Y" ]; then
                    ( cd $swarmdir ; sudo git pull ) > /dev/null 2>&1
                    ( cd $swarmdir ; sudo git reset --hard origin/master ) > /dev/null 2>&1
                    sudo chmod +x $swarmdir/swarm $plugins/watchdog
                    source $modules/updater
                    echo ""
                    echo -e $text_red " SWARM update successfully!"
                    echo -e $TEXT_RED_B && pause ' Press [Enter] key to continue...' && echo -e $text_reset
                    clear
                    exit 0
                fi
            fi

            if [ "$selector" = "x" ] || [ "$selector" = "X" ]; then
                counter3=1
            fi
        done
        unset selector
    fi

############################################################################################################################################################

    if [ "$selector" = "x" ] || [ "$selector" = "X" ]; then
        counter=1
    fi
done
counter=0
clear
exit 0