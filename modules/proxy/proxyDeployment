#!/bin/bash

webMonitor="/var/www/html/swarm-nodes/index.html"

if [ "$proxyCertReq" = "true" ]; then
    # Check if letsencrypt is already installed on the node
    if [ ! -d "/etc/letsencrypt" ]; then
        {
            echo 0
            if [ "$ufw" = "true" ]; then
                sudo ufw allow 80/tcp > /dev/null 2>&1
            fi
            echo 10
            sudo apt-get -qq install software-properties-common certbot python3-certbot-nginx -y > /dev/null 2>&1
            echo 20
            sudo rm -rf /etc/nginx/sites-enabled/default /etc/nginx/sites-available/default > /dev/null 2>&1
            echo 30
            sudo rm -rf /etc/nginx/sites-enabled/hornet /etc/nginx/sites-enabled/bee /etc/nginx/sites-enabled/goshimmer /etc/nginx/sites-enabled/wasp* > /dev/null 2>&1
            echo 50
            sudo cp -rf $swarmTemplates/proxy/nginx_http.template /etc/nginx/sites-enabled/default
            echo 60
            echo 70
            sudo systemctl restart nginx
            echo 90
            if [ ! -f "/etc/nginx/nginx.conf" ]; then
                sudo apt-get -qq -o DPkg::options::=--force-confmiss --reinstall install nginx-common > /dev/null 2>&1
            fi
            echo 100
            sleep 0.25
        } | whiptail --gauge "Please wait while the proxy will be installed..." 6 65 0
    fi

    if [ -f "/usr/bin/hornet" ] && [ ! -z "$proxyHornetDomain" ]; then
        if [ ! -d "/etc/letsencrypt/live/$proxyHornetDomain" ]; then
            if [ -z "$emailAddress" ]; then
                emailAddress=$(whiptail --inputbox "\nPlease enter your e-mail address so that a certificate can be issued" 10 65 --title "Proxy - Certificate" 3>&1 1>&2 2>&3)
            fi
            if [ ! -z "$emailAddress" ]; then
                {
                    echo 0
                    echo 10
                    if [ ! -f "/etc/nginx/nginx.conf" ]; then
                        sudo apt-get -qq -o DPkg::options::=--force-confmiss --reinstall install nginx-common > /dev/null 2>&1
                    fi
                    echo 25
                    proxyStatus="$(systemctl show -p ActiveState --value nginx)"
                    if [ "$proxyStatus" != "active" ]; then
                        sudo cp -rf $swarmTemplates/proxy/nginx_http.template /etc/nginx/sites-enabled/default
                        sudo systemctl restart nginx
                    fi
                    echo 50
                    sudo certbot --noninteractive --agree-tos --no-eff-email --nginx --no-redirect -d $proxyHornetDomain -m $emailAddress > /dev/null 2>&1
                    unset emailaddress
                    echo 100
                } | whiptail --gauge "Requesting SSL certificate for Hornet..." 6 65 0  
                # echo ""
                # read -p "Press any key to continue..."
                if [ ! -f "/etc/letsencrypt/live/$proxyHornetDomain/fullchain.pem" ]; then
                    whiptail --title "Proxy - Deployment" --msgbox "Aborted - SSL Certificate for Hornet not found!" 8 65
                fi
            fi
        fi
    fi

    if [ -f "/usr/bin/bee" ] && [ ! -z "$proxyBeeDomain" ]; then
        if [ ! -d "/etc/letsencrypt/live/$proxyBeeDomain" ]; then
            if [ -z "$emailAddress" ]; then
                emailAddress=$(whiptail --inputbox "\nPlease enter your e-mail address so that a certificate can be issued" 10 65 --title "Proxy - Certificate" 3>&1 1>&2 2>&3)
            fi
            exitStatus=$?
            if [ ! -z "$emailAddress" ] && [ $exitStatus != 1 ]; then
                {
                    echo 0
                    echo 10
                    if [ ! -f "/etc/nginx/nginx.conf" ]; then
                        sudo apt-get -qq -o DPkg::options::=--force-confmiss --reinstall install nginx-common > /dev/null 2>&1
                    fi
                    echo 25
                    proxyStatus="$(systemctl show -p ActiveState --value nginx)"
                    if [ "$proxyStatus" != "active" ]; then
                        sudo cp -rf $swarmTemplates/proxy/nginx_http.template /etc/nginx/sites-enabled/default
                        sudo systemctl restart nginx
                    fi
                    echo 50
                    sudo certbot --noninteractive --agree-tos --no-eff-email --nginx --no-redirect -d $proxyBeeDomain -m $emailAddress > /dev/null 2>&1
                    unset emailaddress
                    echo 100
                } | whiptail --gauge "Requesting SSL certificate for Bee..." 6 65 0
                # echo ""
                # read -p "Press any key to continue..."
                if [ ! -f "/etc/letsencrypt/live/$proxyBeeDomain/fullchain.pem" ]; then
                    whiptail --title "Proxy - Deployment" --msgbox "Aborted - SSL Certificate for Bee not found!" 8 65
                fi
            fi
        fi
    fi

    if [ -f "/usr/bin/goshimmer" ] && [ ! -z "$proxyGoshimmerDomain" ]; then
        if [ ! -d "/etc/letsencrypt/live/$proxyGoshimmerDomain" ]; then
            if [ -z "$emailAddress" ]; then
                emailAddress=$(whiptail --inputbox "\nPlease enter your e-mail address so that a certificate can be issued" 10 65 --title "Proxy - Certificate" 3>&1 1>&2 2>&3)
            fi
            exitStatus=$?
            if [ ! -z "$emailAddress" ] && [ $exitStatus != 1 ]; then
                {
                    echo 0
                    echo 10
                    if [ ! -f "/etc/nginx/nginx.conf" ]; then
                        sudo apt-get -qq -o DPkg::options::=--force-confmiss --reinstall install nginx-common > /dev/null 2>&1
                    fi
                    echo 25
                    proxyStatus="$(systemctl show -p ActiveState --value nginx)"
                    if [ "$proxyStatus" != "active" ]; then
                        sudo cp -rf $swarmTemplates/proxy/nginx_http.template /etc/nginx/sites-enabled/default
                        sudo systemctl restart nginx
                    fi
                    echo 50
                    sudo certbot --noninteractive --agree-tos --no-eff-email --nginx --no-redirect -d $proxyGoshimmerDomain -m $emailAddress > /dev/null 2>&1
                    unset emailaddress
                    echo 100
                } | whiptail --gauge "Requesting SSL certificate for GoShimmer..." 6 65 0  
                # echo ""
                # read -p "Press any key to continue..."
                if [ ! -f "/etc/letsencrypt/live/$proxyGoshimmerDomain/fullchain.pem" ]; then
                    whiptail --title "Proxy - Deployment" --msgbox "Aborted - SSL Certificate for GoShimmer not found!" 8 65
                fi
            fi
        fi
    fi

    if [ -f "/usr/bin/wasp" ] && [ ! -z "$proxyWaspDashboardDomain" ]; then
        if [ ! -d "/etc/letsencrypt/live/$proxyWaspDashoardDomain" ]; then
            if [ -z "$emailAddress" ]; then
                emailAddress=$(whiptail --inputbox "\nPlease enter your e-mail address so that a certificate can be issued" 10 65 --title "Proxy - Certificate" 3>&1 1>&2 2>&3)
            fi
            if [ ! -z "$emailAddress" ]; then
                {
                    echo 0
                    echo 10
                    if [ ! -f "/etc/nginx/nginx.conf" ]; then
                        sudo apt-get -qq -o DPkg::options::=--force-confmiss --reinstall install nginx-common > /dev/null 2>&1
                    fi
                    echo 25
                    proxyStatus="$(systemctl show -p ActiveState --value nginx)"
                    if [ "$proxyStatus" != "active" ]; then
                        sudo cp -rf $swarmTemplates/proxy/nginx_http.template /etc/nginx/sites-enabled/default
                        sudo systemctl restart nginx
                    fi
                    echo 50
                    sudo certbot --noninteractive --agree-tos --no-eff-email --nginx --no-redirect -d $proxyWaspDashboardDomain -m $emailAddress > /dev/null 2>&1
                    unset emailaddress
                    echo 100
                } | whiptail --gauge "Requesting SSL certificate for WASP dashboard..." 6 65 0  
                # echo ""
                # read -p "Press any key to continue..."
                if [ ! -f "/etc/letsencrypt/live/$proxyWaspDomain/fullchain.pem" ]; then
                    whiptail --title "Proxy - Deployment" --msgbox "Aborted - SSL Certificate for the WASP dashboard not found!" 8 65
                fi
            fi
        fi
    fi

    if [ -f "/usr/bin/wasp" ] && [ ! -z "$proxyWaspApiDomain" ]; then
        if [ ! -d "/etc/letsencrypt/live/$proxyWaspApiDomain" ]; then
            if [ -z "$emailAddress" ]; then
                emailAddress=$(whiptail --inputbox "\nPlease enter your e-mail address so that a certificate can be issued" 10 65 --title "Proxy - Certificate" 3>&1 1>&2 2>&3)
            fi
            if [ ! -z "$emailAddress" ]; then
                {
                    echo 0
                    echo 10
                    if [ ! -f "/etc/nginx/nginx.conf" ]; then
                        sudo apt-get -qq -o DPkg::options::=--force-confmiss --reinstall install nginx-common > /dev/null 2>&1
                    fi
                    echo 25
                    proxyStatus="$(systemctl show -p ActiveState --value nginx)"
                    if [ "$proxyStatus" != "active" ]; then
                        sudo cp -rf $swarmTemplates/proxy/nginx_http.template /etc/nginx/sites-enabled/default
                        sudo systemctl restart nginx
                    fi
                    echo 50
                    sudo certbot --noninteractive --agree-tos --no-eff-email --nginx --no-redirect -d $proxyWaspApiDomain -m $emailAddress > /dev/null 2>&1
                    unset emailaddress
                    echo 100
                } | whiptail --gauge "Requesting SSL certificate for WASP API..." 6 65 0  
                # echo ""
                # read -p "Press any key to continue..."
                if [ ! -f "/etc/letsencrypt/live/$proxyWaspApiDomain/fullchain.pem" ]; then
                    whiptail --title "Proxy - Deployment" --msgbox "Aborted - SSL Certificate for the WASP API not found!" 8 65
                fi
            fi
        fi
    fi

    ### PREPARING CONFIGURATIONS
    if [ -f "/etc/letsencrypt/live/$proxyHornetDomain/fullchain.pem" ]; then
        if [ -f "/usr/bin/hornet" ]; then
            if [ -z "$proxyHornetPort" ]; then
                missingProxyHornetPort=true
            fi
        fi
        if [ "$missingProxyHornetPort" = "true" ]; then
            whiptail --title "Proxy - Deployment" --msgbox "Please specify the port below. If you use multiple nodes with the same domain, then they must have different ports!" 8 65
            if [ -f "/usr/bin/hornet" ]; then
                if [ -z "$proxyHornetPort" ]; then
                    proxyHornetPort=$(whiptail --inputbox "\nDefine the port for Hornet" 10 65 --title "Proxy - Hornet Port" 3>&1 1>&2 2>&3)
                    exitStatus=$?
                    if [ $exitStatus != 1 ]; then
                        sudo sed -i 's/^proxyHornetPort=.*/proxyHornetPort='$proxyHornetPort'/' $swarmConfigs/proxy.cfg
                    fi
                fi
            fi
        fi
    fi

    if [ -f "/etc/letsencrypt/live/$proxyBeeDomain/fullchain.pem" ]; then
        if [ -f "/usr/bin/bee" ]; then
            if [ -z "$proxyBeePort" ]; then
                missingProxyBeePort=true
            fi
        fi
        if [ "$missingProxyBeePort" = "true" ]; then
            whiptail --title "Proxy - Deployment" --msgbox "Please specify the port below. If you use multiple nodes with the same domain, then they must have different ports!" 8 65
            if [ -f "/usr/bin/bee" ]; then
                if [ -z "$proxyBeePort" ]; then
                    proxyBeePort=$(whiptail --inputbox "\nDefine the port for Bee" 10 65 --title "Proxy - Bee Port" 3>&1 1>&2 2>&3)
                    sudo sed -i 's/^proxyBeePort=.*/proxyBeePort='$proxyBeePort'/' $swarmConfigs/proxy.cfg
                fi
            fi
        fi
    fi

    if [ -f "/etc/letsencrypt/live/$proxyGoshimmerDomain/fullchain.pem" ]; then
        if [ -f "/usr/bin/goshimmer" ]; then
            if [ -z "$proxyGoshimmerPort" ]; then
                missingProxyGoshimmerPort=true
            fi
        fi
        if [ "$missingProxyGoshimmerPort" = "true" ]; then
            whiptail --title "Proxy - Deployment" --msgbox "Please specify the port below. If you use multiple nodes with the same domain, then they must have different ports!" 8 65
            if [ -f "/usr/bin/goshimmer" ]; then
                if [ -z "$proxyGoshimmerPort" ]; then
                    proxyGoshimmerPort=$(whiptail --inputbox "\nDefine the port for GoShimmer" 10 65 --title "Proxy - GoShimmer Port" 3>&1 1>&2 2>&3)
                    exitStatus=$?
                    if [ $exitStatus != 1 ]; then
                        sudo sed -i 's/^proxyGoshimmerPort=.*/proxyGoshimmerPort='$proxyGoshimmerPort'/' $swarmConfigs/proxy.cfg
                    fi
                fi
            fi
        fi
    fi

    if [ -f "/etc/letsencrypt/live/$proxyWaspDashboardDomain/fullchain.pem" ]; then
        if [ -f "/usr/bin/wasp" ]; then
            if [ -z "$proxyWaspDashboardPort" ]; then
                missingProxyWaspDashboardPort=true
            fi
        fi
        if [ "$missingProxyWaspDashboardPort" = "true" ]; then
            whiptail --title "Proxy - Deployment" --msgbox "Please specify the port below. If you use multiple nodes with the same domain, then they must have different ports!" 8 65
            if [ -f "/usr/bin/wasp" ]; then
                if [ -z "$proxyWaspDashoardPort" ]; then
                    proxyWaspDashboardPort=$(whiptail --inputbox "\nDefine the port for WASP" 10 65 --title "Proxy - WASP Dashboard Port" 3>&1 1>&2 2>&3)
                    sudo sed -i 's/^proxyWaspDashboardPort=.*/proxyWaspDashboardPort='$proxyWaspDashboardPort'/' $swarmConfigs/proxy.cfg
                fi
            fi
        fi
    fi

    if [ -f "/etc/letsencrypt/live/$proxyWaspApiDomain/fullchain.pem" ]; then
        if [ -f "/usr/bin/wasp" ]; then
            if [ -z "$proxyWaspApiPort" ]; then
                missingProxyWaspApiPort=true
            fi
        fi
        if [ "$missingProxyWaspApiPort" = "true" ]; then
            whiptail --title "Proxy - Deployment" --msgbox "Please specify the port below. If you use multiple nodes with the same domain, then they must have different ports!" 8 65
            if [ -f "/usr/bin/wasp" ]; then
                if [ -z "$proxyWaspApiPort" ]; then
                    proxyWaspApiPort=$(whiptail --inputbox "\nDefine the port for WASP" 10 65 --title "Proxy - WASP API Port" 3>&1 1>&2 2>&3)
                    sudo sed -i 's/^proxyWaspApiPort=.*/proxyWaspApiPort='$proxyWaspApiPort'/' $swarmConfigs/proxy.cfg
                fi
            fi
        fi
    fi
fi

# Check if the certificate for the domain already exist
if [ -f "/etc/letsencrypt/live/$proxyHornetDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyBeeDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyGoshimmerDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyWaspDomain/fullchain.pem" ]; then
    {
    echo 0
    echo 10
    if [ -d "/var/www/html/swarm-nodes" ]; then
        sudo rm -rf /var/www/html/swarm-nodes
        sudo mkdir -p /var/www/html/swarm-nodes
    else
        sudo mkdir -p /var/www/html/swarm-nodes
    fi
    sudo cp -rf $swarmTemplates/proxy/{index.html,img,css} /var/www/html/swarm-nodes/ > /dev/null 2>&1
    echo 25
    if [ -f "/etc/nginx/sites-available/default > /dev/null 2>&1" ]; then
        sudo rm -rf /etc/nginx/sites-available/default > /dev/null 2>&1
    fi
    sudo rm -rf /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/hornet /etc/nginx/sites-enabled/bee /etc/nginx/sites-enabled/goshimmer /etc/nginx/sites-enabled/wasp* > /dev/null 2>&1
    sudo cp -rf $swarmTemplates/proxy/nginx_default.template /etc/nginx/sites-enabled/default

    #################################################################################################
    echo 35
    if [ -f "/usr/bin/hornet" ] && [ -f "/etc/letsencrypt/live/$proxyHornetDomain/fullchain.pem" ] && [ ! -z "$proxyHornetDomain" ] && [ ! -z "$proxyHornetPort" ]; then
        if [ -z "$defaultDomain" ]; then
            defaultDomain="$proxyHornetDomain"
        fi
        sudo cp -rf $swarmTemplates/proxy/nginx_hornet.template /etc/nginx/sites-enabled/hornet
        sudo sed -i 's/domain.tld/'$proxyHornetDomain'/g' /etc/nginx/sites-enabled/hornet
        sudo sed -i 's/443/'$proxyHornetPort'/g' /etc/nginx/sites-enabled/hornet
        sudo sed -i 's~"hornet\/dashboard"~"https:\/\/'$proxyHornetDomain':'$proxyHornetPort'\/dashboard" target="_blank"~g' $webMonitor
        if [ "$ufw" = "true" ]; then
            sudo ufw allow $proxyHornetPort/tcp > /dev/null 2>&1
        fi
    else
        sudo sed -i 's/hornet\/dashboard/#/g' $webMonitor
        sudo sed -i 's~/img/hornet.*id~/img/hornet_logo_gray.svg" alt="Hornet not installed" id~' $webMonitor
    fi
    echo 45
    if [ -f "/usr/bin/bee" ] && [ -f "/etc/letsencrypt/live/$proxyBeeDomain/fullchain.pem" ] && [ ! -z "$proxyBeeDomain" ] && [ ! -z "$proxyBeePort" ]; then
        if [ -z "$defaultDomain" ]; then
            defaultDomain="$proxyBeeDomain"
        fi
        sudo cp -rf $swarmTemplates/proxy/nginx_bee.template /etc/nginx/sites-enabled/bee
        sudo sed -i 's/domain.tld/'$proxyBeeDomain'/g' /etc/nginx/sites-enabled/bee
        sudo sed -i 's/443/'$proxyBeePort'/g' /etc/nginx/sites-enabled/bee
        sudo sed -i 's/"bee\/dashboard"/"https:\/\/'$proxyBeeDomain':'$proxyBeePort'\/dashboard" target="_blank"/g' $webMonitor
        if [ "$ufw" = "true" ]; then
            sudo ufw allow $proxyBeePort/tcp > /dev/null 2>&1
        fi
    else
        sudo sed -i 's/bee\/dashboard/#/g' $webMonitor
        sudo sed -i 's~/img/bee.*id~/img/bee_logo_gray.svg" alt="Bee not installed" id~' $webMonitor
    fi
    echo 50
    if [ -f "/usr/bin/goshimmer" ] && [ -f "/etc/letsencrypt/live/$proxyGoshimmerDomain/fullchain.pem" ] && [ ! -z "$proxyGoshimmerDomain" ] && [ ! -z "$proxyGoshimmerPort" ]; then
        source $swarmConfigs/goshimmer.cfg
        if [ -z "$defaultDomain" ]; then
            defaultDomain="$proxyGoshimmerDomain"
        fi
        if [ ! -d "/etc/nginx/goshimmer" ]; then
            sudo mkdir -p /etc/nginx/goshimmer
        fi
        if [ ! -f "/etc/nginx/goshimmer/dashboardauth.conf" ]; then
            sudo echo "" > /etc/nginx/goshimmer/dashboardauth.conf > /dev/null 2>&1
        fi
        if [ ! -f "/etc/nginx/goshimmer/webapiauth.conf" ]; then
            sudo echo "" > /etc/nginx/goshimmer/webapiauth.conf > /dev/null 2>&1
        fi
        sudo cp -rf $swarmTemplates/proxy/nginx_goshimmer.template /etc/nginx/sites-enabled/goshimmer
        sudo sed -i 's/domain.tld/'$proxyGoshimmerDomain'/g' /etc/nginx/sites-enabled/goshimmer
        sudo sed -i 's/443/'$proxyGoshimmerPort'/g' /etc/nginx/sites-enabled/goshimmer
        sudo sed -i 's/"goshimmer\/dashboard"/"https:\/\/'$proxyGoshimmerDomain':'$proxyGoshimmerPort'\/dashboard" target="_blank"/g' $webMonitor
        if [ "$ufw" = "true" ]; then
            sudo ufw allow $proxyGoshimmerPort/tcp > /dev/null 2>&1
        fi
    else
        sudo sed -i 's/goshimmer\/dashboard/#/g' $webMonitor
        sudo sed -i 's~/img/goshimmer.*id~/img/goshimmer_logo_gray.svg" alt="GoShimmer not installed" id~' $webMonitor
    fi
    echo 55
    if [ -f "/usr/bin/wasp" ] && [ -f "/etc/letsencrypt/live/$proxyWaspDashboardDomain/fullchain.pem" ] && [ ! -z "$proxyWaspDashboardDomain" ] && [ ! -z "$proxyWaspDashboardPort" ]; then
        source $swarmConfigs/wasp.cfg
        if [ -z "$defaultDomain" ]; then
            defaultDomain="$proxyWaspDashboardDomain"
        fi
        sudo cp -rf $swarmTemplates/proxy/nginx_wasp-dashboard.template /etc/nginx/sites-enabled/wasp-dashboard
        sudo sed -i 's/domain.tld/'$proxyWaspDashboardDomain'/g' /etc/nginx/sites-enabled/wasp-dashboard
        sudo sed -i 's/443/'$proxyWaspDashboardPort'/g' /etc/nginx/sites-enabled/wasp-dashboard
        sudo sed -i 's/"wasp\/dashboard"/"https:\/\/'$proxyWaspDashboardDomain':'$proxyWaspDashboardPort'\/dashboard" target="_blank"/g' $webMonitor
        if [ "$ufw" = "true" ]; then
            sudo ufw allow $proxyWaspDashboardPort/tcp > /dev/null 2>&1
        fi
    else
        sudo sed -i 's/wasp\/dashboard/#/g' $webMonitor
        sudo sed -i 's~/img/wasp.*id~/img/wasp_logo_gray.svg" alt="WASP not installed" id~' $webMonitor
    fi
    if [ -f "/usr/bin/wasp" ] && [ -f "/etc/letsencrypt/live/$proxyWaspApiDomain/fullchain.pem" ] && [ ! -z "$proxyWaspApiDomain" ] && [ ! -z "$proxyWaspApiPort" ]; then
        source $swarmConfigs/wasp.cfg
        if [ -z "$defaultDomain" ]; then
            defaultDomain="$proxyWaspApiDomain"
        fi
        if [ ! -d "/etc/nginx/wasp" ]; then
            sudo mkdir -p /etc/nginx/wasp
        fi
        if [ ! -f "/etc/nginx/wasp/webapiauth.conf" ]; then
            sudo echo "" > /etc/nginx/wasp/webapiauth.conf > /dev/null 2>&1
        fi
        sudo cp -rf $swarmTemplates/proxy/nginx_wasp-api.template /etc/nginx/sites-enabled/wasp-api
        sudo sed -i 's/domain.tld/'$proxyWaspApiDomain'/g' /etc/nginx/sites-enabled/wasp-api
        sudo sed -i 's/443/'$proxyWaspApiPort'/g' /etc/nginx/sites-enabled/wasp-api
        if [ "$ufw" = "true" ]; then
            sudo ufw allow $proxyWaspApiPort/tcp > /dev/null 2>&1
        fi
    fi
    echo 60
    sudo sed -i 's/# server_tokens off;/server_tokens off;/g' /etc/nginx/nginx.conf
    sudo sed -i 's/# server_names_hash_bucket_size 64;/server_names_hash_bucket_size 64;/g' /etc/nginx/nginx.conf
    sudo sed -i 's/domain.tld/'$defaultDomain'/g' /etc/nginx/sites-enabled/default
    echo 75
    sudo systemctl restart nginx > /dev/null 2>&1
    echo 90
    echo 100
    } | whiptail --gauge "Please wait while SWARM deploying the config and restart the proxy..." 8 65 0
    if [ "$swarmProxyUpdate" = "true" ]; then
        sudo systemctl restart nginx
    else
        whiptail --title "Proxy - Deployment" --msgbox "Proxy configuration successfully applied!" 8 65
    fi
else
    if [ "$swarmProxyUpdate" != "true" ]; then
        whiptail --title "Proxy - Deployment" --msgbox "Aborted - No SSL Certificates not found!" 8 65
    fi
fi