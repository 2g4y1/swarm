#!/bin/bash
# source $logs/dbPruner
source $logs/watchdog

if [ -n "$hornetSyncCounter" ]; then
    if ! [ "$hornetSyncCounter" -eq "$hornetSyncCounter" ] 2>/dev/null; then
        hornetSyncCounter=0
        sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $logs/watchdog
    fi
else
    hornetSyncCounter=0
    sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $logs/watchdog
fi

if [ -n "$goshimmerSyncCounter" ]; then
    if ! [ "$goshimmerSyncCounter" -eq "$goshimmerSyncCounter" ] 2>/dev/null; then
        goshimmerSyncCounter=0
        sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $logs/watchdog
    fi
else
    goshimmerSyncCounter=0
    sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $logs/watchdog
fi


# Hornet Sync Check
hornetSyncStatus="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.isHealthy')"
if [ "$hornetCheckSync" = "true" ] && [ "$hornetStatus" = "active" ] && [ "$hornetSyncStatus" = "false" ] && [ -f "/usr/bin/hornet" ]; then
    lmi="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.latestMilestoneIndex')"
    cmi="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.confirmedMilestoneIndex')"
    let dlmi="$lmi-$cmi"
    if [ "$dlmi" -gt "$maxLmi" ]; then
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        sudo systemctl stop hornet
        if [ $hornetSyncCounter -gt 5 ]; then
            if [ "$hornetAllowDbReset" = "true" ]; then
                sudo rm -rf $hornetDir/${network}db $hornetDir/snapshots/${network}/*.bin
                echo "$restartDate [WACHTDOG] - HORNET - ${network}DB deleted because too many milestones behind!" >> $logs/swarm.log
            fi
            hornetSyncCounter=0
        else
            let hornetSyncCounter=$hornetSyncCounter+1
        fi
        sudo systemctl start hornet
        echo "$restartDate [WACHTDOG] - HORNET - Hornet restarted because maxLmi reached!" >> $logs/swarm.log
        sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $logs/watchdog
    fi
else
    if [ "$hornetSyncCounter" -gt "0" ]; then
        let hornetSyncCounter=$hornetSyncCounter-1
        sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $logs/watchdog
    fi
fi

# GoShimmer Sync Check
goshimmerSyncStatus="$(curl -s -X GET "http://localhost:8080/info" -H  "accept: application/json"|jq '.tangleTime.synced')"
if [ "$goshimmerCheckSync" = "true" ] && [ "$goshimmerStatus" = "active" ] && [ "$goshimmerSyncStatus" = "false" ] && [ -f "/usr/bin/goshimmer" ]; then
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        sudo systemctl stop goshimmer
        if [ $goshimmerSyncCounter -gt 5 ]; then
            if [ "$goshimmerAllowDbReset" = "true" ]; then
                sudo rm -rf $goshimmerDir/mainnetdb
                sudo -u goshimmer wget -q -O $goshimmerDir/snapshot.bin https://dbfiles-goshimmer.s3.eu-central-1.amazonaws.com/snapshots/nectar/snapshot-latest.bin
                echo "$restartDate [WACHTDOG] - GOSHIMMER - Database deleted because node was not synced!" >> $logs/swarm.log
            fi
            goshimmerSyncCounter=0
        else
            let goshimmerSyncCounter=$goshimmerSyncCounter+1
        fi
        sudo systemctl start goshimmer
        echo "$restartDate [WACHTDOG] - GOSHIMMER - GoShimmer restarted because not was not sync!" >> $logs/swarm.log
        sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $logs/watchdog
    fi
else
    if [ "$goshimmerSyncCounter" -gt "0" ]; then
        let goshimmerSyncCounter=$goshimmerSyncCounter-1
        sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $logs/watchdog
    fi
fi