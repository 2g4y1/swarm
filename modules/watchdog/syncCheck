#!/bin/bash

source $watchdogLog

if [ -n "$hornetSyncCounter" ]; then
    if [ $hornetSyncCounter -ne $hornetSyncCounter ] 2>/dev/null; then
        hornetSyncCounter=0
        sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $watchdogLog
    fi
else
    hornetSyncCounter=0
    sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $watchdogLog
fi

if [ -n "$beeSyncCounter" ]; then
    if [ $beeSyncCounter -ne $beeSyncCounter ] 2>/dev/null; then
        beeSyncCounter=0
        sudo sed -i 's/^beeSyncCounter=.*/beeSyncCounter='$beeSyncCounter'/' $watchdogLog
    fi
else
    beeSyncCounter=0
    sudo sed -i 's/^beeSyncCounter=.*/beeSyncCounter='$beeSyncCounter'/' $watchdogLog
fi

if [ -n "$goshimmerSyncCounter" ]; then
    if [ $goshimmerSyncCounter -ne $goshimmerSyncCounter ] 2>/dev/null; then
        goshimmerSyncCounter=0
        sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $watchdogLog
    fi
else
    goshimmerSyncCounter=0
    sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $watchdogLog
fi

if [ -f "/usr/bin/hornet" ]; then
    # Hornet Sync Check
    hornetSyncStatus="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.isHealthy')"
    if [ "$hornetCheckSync" = "true" ] && [ "$hornetStatus" = "active" ] && [ "$hornetSyncStatus" = "false" ]; then
        latestHornetLatestMilestoneIndex="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.latestMilestoneIndex')"
        latestHornetConfirmedMilestoneIndex="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.confirmedMilestoneIndex')"
        let hornetMilestoneDifferenceIndex=$latestHornetLatestMilestoneIndex-$latestHornetConfirmedMilestoneIndex
        if [ $hornetMilestoneDifferenceIndex -gt $hornetMaxMilestones ] && [ $latestHornetConfirmedMilestoneIndex -eq $hornetConfirmedMilestoneIndex ] 2>/dev/null; then
            restartDate=`date '+%d-%m-%Y %H-%M-%S'`
            sudo systemctl stop hornet
            if [ $hornetSyncCounter -gt 5 ]; then
                if [ "$hornetAllowDbReset" = "true" ]; then
                    sudo rm -rf $hornetHome/${hornetNetwork}db $hornetHome/snapshots/${hornetNetwork}/*.bin
                    echo "$restartDate [WACHTDOG] - HORNET - The ${hornetNetwork}DB was deleted because too many milestones behind!" >> $swarmLog
                fi
                hornetSyncCounter=0
            else
                let hornetSyncCounter=$hornetSyncCounter+1
            fi
            sudo systemctl start hornet
            echo "$restartDate [WACHTDOG] - HORNET - Node restarted because max milestones difference reached!" >> $swarmLog
            sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $watchdogLog
        else
            sudo sed -i 's/^hornetConfirmedMilestoneIndex=.*/hornetConfirmedMilestoneIndex='$latestHornetConfirmedMilestoneIndex'/' $watchdogLog
        fi
    else
        if [ "$hornetSyncCounter" -gt "0" ]; then
            let hornetSyncCounter=$hornetSyncCounter-1
            sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $watchdogLog
        fi
    fi
fi

if [ -f "/usr/bin/bee" ]; then
    # Bee Sync Check
    beeSyncStatus="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.isHealthy')"
    if [ "$beeCheckSync" = "true" ] && [ "$beeStatus" = "active" ] && [ "$beeSyncStatus" = "false" ]; then
        latestBeeLatestMilestoneIndex="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.latestMilestoneIndex')"
        latestBeeConfirmedMilestoneIndex="$(curl -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json"|jq '.data.confirmedMilestoneIndex')"
        let beeMilestoneDifferenceIndex=$latestBeeLatestMilestoneIndex-$latestBeeConfirmedMilestoneIndex
        if [ $beeMilestoneDifferenceIndex -gt $beeMaxMilestones ] && [ $latestBeeConfirmedMilestoneIndex -eq $beeConfirmedMilestoneIndex ] 2>/dev/null; then
            restartDate=`date '+%d-%m-%Y %H-%M-%S'`
            sudo systemctl stop bee
            if [ $beeSyncCounter -gt 5 ] 2>/dev/null; then
                if [ "$beeAllowDbReset" = "true" ]; then
                    sudo rm -rf $beeHome/storage $beeHome/snapshots
                    echo "$restartDate [WACHTDOG] - BEE - Database deleted because too many milestones behind!" >> $swarmLog
                fi
                beeSyncCounter=0
            else
                let beeSyncCounter=$beeSyncCounter+1
            fi
            sudo systemctl start bee
            echo "$restartDate [WACHTDOG] - BEE - Node restarted because max milestones difference reached!" >> $swarmLog
            sudo sed -i 's/^beeSyncCounter=.*/beeSyncCounter='$beeSyncCounter'/' $watchdogLog
        else
            sudo sed -i 's/^beeConfirmedMilestoneIndex=.*/beeConfirmedMilestoneIndex='$latestBeeConfirmedMilestoneIndex'/' $watchdogLog
        fi
    else
        if [ $beeSyncCounter -gt 0 ] 2>/dev/null; then
            let beeSyncCounter=$beeSyncCounter-1
            sudo sed -i 's/^beeSyncCounter=.*/beeSyncCounter='$beeSyncCounter'/' $watchdogLog
        fi
    fi
fi

if [ -f "/usr/bin/goshimmer" ]; then
    # GoShimmer Sync Check
    if [ "$timeframe" = "00" ] || [ "$timeframe" = "30" ]; then
        goshimmerSyncStatus="$(curl -s -X GET "http://localhost:8080/info" -H  "accept: application/json"|jq '.tangleTime.synced')"
        if [ "$goshimmerCheckSync" = "true" ] && [ "$goshimmerStatus" = "active" ] && [ "$goshimmerSyncStatus" = "false" ]; then
                getGoshimmerTangleTime=$(curl -s -X GET "http://localhost:8080/info" -H  "accept: application/json"|jq '.tangleTime.time')
                if [ "$getGoshimmerTangleTime" = "$goshimmerTangleTime" ]; then
                    restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                    if [ $goshimmerSyncCounter -gt 4 ] 2>/dev/null; then
                        sudo systemctl stop goshimmer
                        if [ "$goshimmerAllowDbReset" = "true" ]; then
                            sudo rm -rf $goshimmerHome/mainnetdb
                            sudo -u goshimmer wget -q -O $goshimmerHome/snapshot.bin https://dbfiles-goshimmer.s3.eu-central-1.amazonaws.com/snapshots/nectar/snapshot-latest.bin
                            echo "$restartDate [WACHTDOG] - GOSHIMMER - Database deleted because node was not synced!" >> $swarmLog
                        fi
                        goshimmerSyncCounter=0
                        sudo systemctl start goshimmer
                        echo "$restartDate [WACHTDOG] - GOSHIMMER - GoShimmer restarted because not was not sync!" >> $swarmLog
                    else
                        let goshimmerSyncCounter=$goshimmerSyncCounter+1
                    fi
                else
                    if [ "$goshimmerSyncCounter" -gt "0" ]; then
                        let goshimmerSyncCounter=$goshimmerSyncCounter-1
                        sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $watchdogLog
                    fi
                fi
                sudo sed -i 's/^goshimmerTangleTime=.*/goshimmerTangleTime='$getGoshimmerTangleTime'/' $watchdogLog
                sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $watchdogLog
        else
            if [ "$goshimmerSyncCounter" -gt "0" ]; then
                let goshimmerSyncCounter=$goshimmerSyncCounter-1
                sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $watchdogLog
            fi
        fi
    fi
fi
