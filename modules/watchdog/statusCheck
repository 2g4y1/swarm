#!/bin/bash
source $swarmConfigs/watchdog.cfg

if [ -n "$hornetStatusCounter" ]; then
    if [ $hornetStatusCounter -ne $hornetStatusCounter ] 2>/dev/null; then
        hornetStatusCounter=0
        sudo sed -i 's/^hornetStatusCounter=.*/hornetStatusCounter='$hornetStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    hornetStatusCounter=0
    sudo sed -i 's/^hornetStatusCounter=.*/hornetStatusCounter='$hornetStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

if [ -n "$beeStatusCounter" ]; then
    if [ $beeStatusCounter -ne $beeStatusCounter ] 2>/dev/null; then
        beeStatusCounter=0
        sudo sed -i 's/^beeStatusCounter=.*/beeStatusCounter='$beeStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    beeStatusCounter=0
    sudo sed -i 's/^beeStatusCounter=.*/beeStatusCounter='$beeStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

if [ -n "$goshimmerStatusCounter" ]; then
    if [ $goshimmerStatusCounter -ne $goshimmerStatusCounter ] 2>/dev/null; then
        goshimmerStatusCounter=0
        sudo sed -i 's/^goshimmerStatusCounter=.*/goshimmerStatusCounter='$goshimmerStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    goshimmerStatusCounter=0
    sudo sed -i 's/^goshimmerStatusCounter=.*/goshimmerStatusCounter='$goshimmerStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

if [ -n "$waspStatusCounter" ]; then
    if [ $waspStatusCounter -ne $waspStatusCounter ] 2>/dev/null; then
        waspStatusCounter=0
        sudo sed -i 's/^waspStatusCounter=.*/waspStatusCounter='$waspStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    waspStatusCounter=0
    sudo sed -i 's/^waspStatusCounter=.*/waspStatusCounter='$waspStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

# Hornet Status Check
if [ "$hornetStatus" != "active" ] && [ -f "/usr/bin/hornet" ]; then
    sudo systemctl stop hornet
    restartDate=`date '+%d-%m-%Y %H-%M-%S'`
    if [ $hornetStatusCounter -ge 2 ] 2>/dev/null; then
        if [ "$hornetAllowDbReset" = "true" ]; then
            sudo rm -rf $hornetHome/${hornetNetwork}db $hornetHome/snapshots/${hornetNetwork}/*.bin
            consoleLog="[WACHTDOG] - HORNET - ${hornetNetwork}DB deleted because the maximum number of attempted restarts was reached."
            echo "$restartDate $consoleLog" >> $swarmLogs/swarm.log
            source $swarmPlugins/telegram
        fi
        hornetStatusCounter=0
    else
        let hornetStatusCounter=$hornetStatusCounter+1
    fi
    sudo systemctl restart hornet
    sudo sed -i 's/^hornetStatusCounter=.*/hornetStatusCounter='$hornetStatusCounter'/' $swarmConfigs/watchdog.cfg
    consoleLog="$[WACHTDOG] - HORNET - Node was restarted because the service is not active."
    echo "$restartDate " >> $swarmLogs/swarm.log
    source $swarmPlugins/telegram
else
    if [ $hornetStatusCounter -gt 0 ] 2>/dev/null; then
        let hornetStatusCounter=$hornetStatusCounter-1
        sudo sed -i 's/^hornetStatusCounter=.*/hornetStatusCounter='$hornetStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# Bee Status Check
if [ "$beeStatus" != "active" ] && [ -f "/usr/bin/bee" ]; then
    sudo systemctl stop bee
    restartDate=`date '+%d-%m-%Y %H-%M-%S'`
    if [ $beeStatusCounter -ge 2 ] 2>/dev/null; then
        if [ "$beeAllowDbReset" = "true" ]; then
            sudo rm -rf $beeHome/storage/$beeNetwork $beeHome/snapshots/$beeNetwork
            consoleLog="[WACHTDOG] - BEE - ${beeNetwork}DB deleted because the maximum number of attempted restarts was reached."
            echo "$restartDate $consoleLog" >> $swarmLogs/swarm.log
            source $swarmPlugins/telegram
        fi
        beeStatusCounter=0
    else
        let beeStatusCounter=$beeStatusCounter+1
    fi
    sudo systemctl restart bee
    sudo sed -i 's/^beeStatusCounter=.*/beeStatusCounter='$beeStatusCounter'/' $swarmConfigs/watchdog.cfg
    consoleLog="[WACHTDOG] - BEE - Node was restarted because the service is not active."
    echo "$restartDate $consoleLog" >> $swarmLogs/swarm.log
    source $swarmPlugins/telegram
else
    if [ $beeStatusCounter -gt 0 ] 2>/dev/null; then
        let beeStatusCounter=$beeStatusCounter-1
        sudo sed -i 's/^beeStatusCounter=.*/beeStatusCounter='$beeStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# GoShimmer Status Check
if [ "$goshimmerStatus" != "active" ] && [ -f "/usr/bin/goshimmer" ]; then
    sudo systemctl stop goshimmer
    restartDate=`date '+%d-%m-%Y %H-%M-%S'`
    if [ $goshimmerStatusCounter -ge 2 ] 2>/dev/null; then
        if [ "$goshimmerAllowDbReset" = "true" ]; then
            sudo rm -rf $goshimmerHome/mainnetdb $goshimmerHome/peerdb
            source $goshimmerModules/goshimmerDbDownload
            consoleLog="[WACHTDOG] - GOSHIMMER - Database deleted because the maximum number of attempted restarts was reached."
            echo "$restartDate $consoleLog" >> $swarmLogs/swarm.log
            source $swarmPlugins/telegram
        fi
        goshimmerStatusCounter=0
    else
        let goshimmerStatusCounter=$goshimmerStatusCounter+1
    fi
    sudo systemctl restart goshimmer
    sudo sed -i 's/^goshimmerStatusCounter=.*/goshimmerStatusCounter='$goshimmerStatusCounter'/' $swarmConfigs/watchdog.cfg
    consoleLog="[WACHTDOG] - GOSHIMMER - Node was restarted because the service is not active."
    echo "$restartDate $consoleLog" >> $swarmLogs/swarm.log
    source $swarmPlugins/telegram
else
    if [ $goshimmerStatusCounter -gt 0 ] 2>/dev/null; then
        let goshimmerStatusCounter=$goshimmerStatusCounter-1
        sudo sed -i 's/^goshimmerStatusCounter=.*/goshimmerStatusCounter='$goshimmerStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# WASP Status Check
if [ "$waspStatus" != "active" ] && [ -f "/usr/bin/wasp" ]; then
    sudo systemctl stop wasp
    restartDate=`date '+%d-%m-%Y %H-%M-%S'`
    if [ $waspStatusCounter -ge 2 ] 2>/dev/null; then
        if [ "$waspAllowDbReset" = "true" ]; then
            sudo rm -rf $waspHome/waspdb
            consoleLog="[WACHTDOG] - WASP - Database deleted because the maximum number of attempted restarts was reached."
            echo "$restartDate $consoleLog" >> $swarmLogs/swarm.log
            source $swarmPlugins/telegram
        fi
        waspStatusCounter=0
    else
        let waspStatusCounter=$waspStatusCounter+1
    fi
    sudo systemctl start wasp
    sudo sed -i 's/^waspStatusCounter=.*/waspStatusCounter='$waspStatusCounter'/' $swarmConfigs/watchdog.cfg
    consoleLog="[WACHTDOG] - WASP - Node was restarted because the service is not active."
    echo "$restartDate $consoleLog" >> $swarmLogs/swarm.log
    source $swarmPlugins/telegram
else
    if [ $waspStatusCounter -gt 0 ] 2>/dev/null; then
        let waspStatusCounter=$waspStatusCounter-1
        sudo sed -i 's/^waspStatusCounter=.*/waspStatusCounter='$waspStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi