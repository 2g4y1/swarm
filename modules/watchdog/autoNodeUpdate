#!/bin/bash

if [ "$timeframe" = "00" ] || [ "$timeframe" = "15" ] || [ "$timeframe" = "30" ] || [ "$timeframe" = "45" ]; then
    if [ "$hornetAutoUpdate" = "true" ] && [ -f "/usr/bin/hornet" ]; then
        source $modules/hornet/getVersion
        if [ "$hornetRelease" = "stable" ]; then
            if [ "$hornetVersion" != "$latestHornetVersion" ]; then
                sudo apt-get update
                sudo apt-get -y -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confnew install hornet
                IFS=', ' read -r -a ARRAYhornetConfigs <<< "$hornetConfigs"
                for hornetConfig in "${ARRAYhornetConfigs[@]}"
                do
                    if [ -f "$hornetDir/$hornetConfig.json.dpkg-dist" ]; then
                    sudo cp -r $hornetDir/$hornetConfig.json.dpkg-dist $hornetDir/$hornetConfig.json
                    sudo rm -rf $hornetDir/$hornetConfig.json.dpkg*
                    fi
                done
                unset ARRAYhornetConfigs
                unset hornetConfig

                newHornetVersion=$(hornet -v | awk '{ print $2 }')
                if [ "$hornetVersion" != "$newHornetVersion" ]; then
                    restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                    # CALL MODULE CONFIGPARSER
                    source $modules/hornet/configParser
                    sudo systemctl restart hornet
                    echo "$restartDate [WACHTDOG] - AUTOUPDATE - New Hornet version installed and Hornet restarted!" >> $logs/swarm.log
                fi
            fi
        fi
        if [ "$release" = "testing" ]; then
            if [ "$hornetVersion" != "$latestHornetVersion" ]; then
                sudo apt-get update
                sudo apt-get -y -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confnew install hornet
                IFS=', ' read -r -a ARRAYhornetConfigs <<< "$hornetConfigs"
                for hornetConfig in "${ARRAYhornetConfigs[@]}"
                do
                    if [ -f "$hornetDir/$hornetConfig.json.dpkg-dist" ]; then
                    sudo cp -r $hornetDir/$hornetConfig.json.dpkg-dist $hornetDir/$hornetConfig.json
                    sudo rm -rf $hornetDir/$hornetConfig.json.dpkg*
                    fi
                done
                unset ARRAYhornetConfigs
                unset hornetConfig

                newHornetVersion=$(hornet -v | awk '{ print $2 }')
                if [ "$hornetVersion" != "$newHornetVersion" ]; then
                    restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                    # CALL MODULE CONFIGPARSER
                    source $modules/hornet/configParser
                    sudo systemctl restart hornet
                    echo "$restartDate [WACHTDOG] - AUTOUPDATE - New Hornet version installed and Hornet restarted!" >> $logs/swarm.log
                fi
            fi
        fi
    fi
fi

if [ "$timeframe" = "00" ] || [ "$timeframe" = "20" ] || [ "$timeframe" = "40" ]; then
    # Bee AutoUpdater
    if [ "$beeAutoUpdate" = "true" ] && [ -f "/usr/bin/bee" ]; then
        source $modules/bee/getVersion
        beeStatus="$(systemctl show -p ActiveState --value bee)"
        if [ "$beeStatus" = "active" ] && [ "$beeVersion" != "$latestBeeVersion" ]; then
            sudo systemctl stop bee
            source $modules/bee/goshimmerInstaller
            source $modules/bee/configParser
            sudo systemctl restart bee
            echo "$restartDate [WACHTDOG] - AUTOUPDATE - New Bee version installed and Bee restarted!" >> $logs/swarm.log
        fi
    fi
fi

if [ "$timeframe" = "00" ] || [ "$timeframe" = "30" ]; then
    # GoShimmer AutoUpdater
    if [ "$goshimmerAutoUpdate" = "true" ] && [ -f "/usr/bin/goshimmer" ]; then
        source $modules/goshimmer/getVersion
        goshimmerStatus="$(systemctl show -p ActiveState --value goshimmer)"
        if [ "$goshimmerStatus" = "active" ] && [ "$goshimmerVersion" != "\"$latestGoshimmerVersion\"" ]; then
            sudo systemctl stop goshimmer
            source $modules/goshimmer/goshimmerInstaller
            source $modules/goshimmer/configParser
            sudo rm -rf $goshimmerDir/mainnetdb
            sudo systemctl restart goshimmer
            echo "$restartDate [WACHTDOG] - AUTOUPDATE - New GoShimmer version installed and GoShimmer restarted!" >> $logs/swarm.log
        fi
    fi
fi