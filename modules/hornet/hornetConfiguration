#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $swarmConfigs/hornet.cfg
    CHOICE=$(
        whiptail --title "Hornet Configurations" --menu "\nChoose an option" 27 65 0 \
        "1)" "Dashboard" \
        "2)" "Node Alias" \
        "3)" "DB Pruning" \
        "4)" "Proof of Work" \
        "5)" "Local Snapshots" \
        "6)" "Enable Plugins" \
        "7)" "Disable Plugins" \
        "8)" "P2P Identity" \
        "9)" "Database Revalidation" \
        "10)" "Gossip Port" \
        "11)" "Autopeering Port" \
        "12)" "Unknown Peers Limit" \
        "13)" "IOTA Network" \
        "14)" "Hornet release Channel" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartHornet" = "true" ]; then
            if (whiptail --title "Hornet Menu" --yesno "Would you like to apply the changes and restart hornet?" 8 65); then
                {
                    echo 0
                    echo 33
                    source $hornetModules/hornetParser
                    echo 50
                    sudo systemctl restart hornet
                    sleep 0.25
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and Hornet is restarted..." 8 65 0
                unset restartHornet
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet.cfg
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet - Dashboard" --menu "\nChoose an option" 14 65 0 \
                    "1)" "Dashboard Username" \
                    "2)" "Dashboard Password" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        hornetUsername=$(whiptail --inputbox "\nDefine a username for the dashboard login" 10 65 $hornetUsername --title "Hornet - Dashboard" 3>&1 1>&2 2>&3)
                        if [ ! -z "$hornetUsername" ]; then
                            source $hornetConfigParsers/hornetDashboardUsername
                            if [ "$newHornetUsername" = "true" ]; then
                                sudo sed -i 's/^hornetUsername=.*/hornetUsername="'$hornetUsername'"/' $swarmConfigs/hornet.cfg
                                whiptail --title "Hornet - Dashboard" --msgbox "New username \"$hornetUsername\" applied!" 8 65
                                unset newHornetUsername
                            else
                                whiptail --title "Hornet - Dashboard" --msgbox "No username change detected!" 8 65
                            fi
                        else
                            whiptail --title "Hornet - Dashboardn" --msgbox "No valid username, please try again!" 8 65
                        fi
                    ;;
                    "2)")
                        source $hornetModules/hornetDashboardPwdGen
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            hornetAlias=$(whiptail --inputbox "\nDefine an alias of your node in the dashboard" 10 65 $hornetAlias --title "Hornet - Alias" 3>&1 1>&2 2>&3)
            if [ ! -z "$hornetAlias" ]; then
                source $hornetConfigParsers/hornetAlias
                if [ "$newHornetAlias" = "true" ]; then
                    sudo sed -i 's/hornetAlias=.*/hornetAlias="'$hornetAlias'"/' $swarmConfigs/hornet.cfg
                    whiptail --title "Hornet - Alias" --msgbox "New alias \"$hornetAlias\" applied!" 8 65
                    unset newHornetAlias
                else
                    whiptail --title "Hornet - Alias" --msgbox "No node alias change detected!" 8 65
                fi
            fi
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet.cfg
                # Hornet Pruning
                if [ "$hornetPruningEnabled" = "true" ]; then
                    hornetPruningEnabledStatus=enabled
                else
                    hornetPruningEnabledStatus=disabled
                fi
                CHOICE=$(
                    whiptail --title "Hornet - Pruning" --menu "\nStatus: $hornetPruningEnabledStatus\n\nChoose an option" 18 65 0 \
                    "1)" "Enable/Disable pruning" \
                    "2)" "Set database size" \
                    "3)" "Set pruning cooldown" \
                    "4)" "Set pruning percentage" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$hornetPruning" = "true" ]; then
                            hornetPruningStatus=enabled
                        else
                            hornetPruningStatus=disabled
                        fi
                        CHOICE=$(
                            whiptail --title "Hornet - Pruning" --menu "\nStatus: $hornetPruningEnabledStatus\n\nChoose an option" 14 65 0 \
                            "1)" "Enable pruning" \
                            "2)" "Disable pruning" 3>&2 2>&1 1>&3
                        )
                        case $CHOICE in
                            "1)")
                                hornetPruningEnabled=true
                                source $hornetConfigParsers/hornetPruningEnabled
                                sudo sed -i 's/^hornetPruningEnabeld=.*/hornetPruningEnabled='$hornetPruningEnabled'/' $swarmConfigs/hornet.cfg
                                whiptail --title "Hornet - Pruning" --msgbox "Pruning was successfully activated!" 8 65
                            ;;
                            "2)")
                                hornetPruningEnabled=false
                                source $hornetConfigParsers/hornetPruningEnabled
                                sudo sed -i 's/^hornetPruningEnabled=.*/hornetPruningEnabled='$hornetPruningEnabled'/' $swarmConfigs/hornet.cfg
                                whiptail --title "Hornet - Pruning" --msgbox "Pruning was successfully deactivated!" 8 65
                            ;;
                        esac
                    ;;
                    "2)")
                        hornetPruningDatabaseSize=$(whiptail --inputbox "\nSet the maximum size of the database in gigabyte." 10 65 $hornetPruningDatabaseSize --title "Hornet - Pruning" 3>&1 1>&2 2>&3)
                        hornetPruningDatabaseSize=${hornetPruningDatabaseSize//[!0-9]/}
                        if [ ! -z "$hornetPruningDatabaseSize" ] && [ $hornetPruningDatabaseSize -eq $hornetPruningDatabaseSize ] 2>/dev/null; then
                            source $hornetConfigParsers/hornetPruningDatabaseSize
                            sudo sed -i 's/^hornetPruningDatabaseSize=.*/hornetPruningDatabaseSize='$hornetPruningDatabaseSize'/' $swarmConfigs/hornet.cfg
                            whiptail --title "Hornet - Pruning" --msgbox "Pruning of the database set to ${hornetPruningDatabaseSize}GB!" 8 65
                        fi
                    ;;
                    "3)")
                        currentHornetPruningCooldownTime=$hornetPruningCooldownTime
                        hornetPruningCooldownTime=$(whiptail --inputbox "\nSet the interval (minutes) at which pruning is performed when the maximum DB size is reached." 10 65 $hornetPruningCooldownTime --title "Hornet - Pruning" 3>&1 1>&2 2>&3)
                        hornetPruningCooldownTime=${hornetPruningCooldownTime//[!0-9]/}
                        if [ $hornetPruningCooldownTime -gt 0 ] && [ $hornetPruningCooldownTime -lt 60 ]; then
                            source $hornetConfigParsers/hornetPruningCooldownTime
                            sudo sed -i 's/^hornetPruningCooldownTime=.*/hornetPruningCooldownTime='$hornetPruningCooldownTime'/' $swarmConfigs/hornet.cfg
                            whiptail --title "Hornet - Pruning" --msgbox "Pruning cooldown time set to ${hornetPruningCooldownTime} minutes!" 8 65
                        fi
                    ;;
                    "4)")
                        hornetPruningPercentage=$(whiptail --inputbox "\nSet how much percent of history should be pruned from the database" 10 65 $hornetPruningPercentage --title "Hornet - Pruning" 3>&1 1>&2 2>&3)
                        if [ ! -z "$hornetPruningPercentage" ] && [ $hornetPruningPercentage -eq $hornetPruningPercentage ]; then
                            source $hornetConfigParsers/hornetPruningPercentage
                            sudo sed -i 's/^hornetPruningPercentage=.*/hornetPruningPercentage='$hornetPruningPercentage'/' $swarmConfigs/hornet.cfg
                            whiptail --title "Hornet - Pruning" --msgbox "Pruning percentage set to ${hornetPruningPercentage}%!" 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            source $swarmConfigs/hornet.cfg
            if [ "$hornetPowEnabled" = "true" ]; then
                hornetPowEnabledStatus=enabled
            else
                hornetPowEnabledStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet - PoW" --menu "\nPOW: $hornetPowEnabledStatus\n\nChoose an option" 14 65 0 \
                "1)" "Enable PoW" \
                "2)" "Disable PoW" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    hornetPowEnabled=true
                    source $hornetConfigParsers/hornetPowEnabled
                    source $hornetConfigParsers/hornetPowWorkerCount
                    sudo sed -i 's/^hornetPowEnabled=.*/hornetPowEnabled='$hornetPowEnabled'/' $swarmConfigs/hornet.cfg
                    sudo sed -i 's/^hornetPowWorkerCount=.*/hornetPowWorkerCount='$hornetPowWorkerCount'/' $swarmConfigs/hornet.cfg
                    whiptail --title "Hornet - PoW" --msgbox "PoW has been enabled!" 8 65
                ;;
                "2)")
                    hornetPowEnabled=false
                    source $hornetConfigParsers/hornetPowEnabled
                    source $hornetConfigParsers/hornetPowWorkerCount
                    sudo sed -i 's/^hornetPowEnabled=.*/hornetPowEnabled='$hornetPowEnabled'/' $swarmConfigs/hornet.cfg
                    sudo sed -i 's/^hornetPowWorkerCount=.*/hornetPowWorkerCount='$hornetPowWorkerCount'/' $swarmConfigs/hornet.cfg
                    whiptail --title "Hornet - PoW" --msgbox "PoW has been disabeld!!" 8 65
                ;;
            esac
        ;;
        "5)")
            source $swarmConfigs/hornet.cfg
            hornetSnapshotInterval=$(whiptail --inputbox "\nDefine after how many milestones your node should take a snapshot" 10 65 $hornetSnapshotInterval --title "Hornet - Snapshots" 3>&1 1>&2 2>&3)
            if [ ! -z "$hornetSnapshotInterval" ] && [ $hornetSnapshotInterval -eq $hornetSnapshotInterval ] 2>/dev/null; then
                source $hornetConfigParsers/hornetSnapshotInterval
                sudo sed -i 's/^hornetSnapshotInterval=.*/hornetSnapshotInterval='$hornetSnapshotInterval'/' $swarmConfigs/hornet.cfg
                if [ "$newHornetSnapshotInterval" = "true" ]; then
                    whiptail --title "Hornet - Snapshots" --msgbox "Snapshot interval changed to $hornetSnapshotInterval milestones!" 8 65
                else
                    whiptail --title "Hornet - Snapshots" --msgbox "No new snapshot interval detected!" 8 65
                fi
            fi
        ;;
        "6)")
            setHornetEnablePlugins=true
            source $swarmConfigs/hornet.cfg
            currentHornetEnablePlugins=$hornetEnablePlugins
            source $hornetModules/hornetPlugins
            hornetEnablePlugins=$(whiptail --title "Hornet - Plugins" --checklist "\nSelect the Hornet plugins to be activated:" 16 78 4 \
                "autopeering" "Autopeering for automatic peering" $hornetAutopeering \
                "spammer" "Spammer to send messages into the tangle" $hornetSpammer \
                "mqtt" "Message stream from Hornet" $hornetMqtt \
                "faucet" "Faucet to receive IOTA tokens e.g. on the devnet" $hornetFaucet 3>&1 1>&2 2>&3)
            hornetEnablePlugins=$(echo $hornetEnablePlugins | tr -s '[:blank:]' ',' | tr -d '"')
            if [ "$hornetEnablePlugins" != "$currentHornetEnablePlugins" ] && [ ! -z "$hornetEnablePlugins" ]; then
                source $hornetConfigParsers/hornetEnablePlugins
                sudo sed -i 's/^hornetEnablePlugins=.*/hornetEnablePlugins="'$hornetEnablePlugins'"/' $swarmConfigs/hornet.cfg
                if [ ! -z "$hornetEnablePlugins" ]; then
                    whiptail --title "Hornet - Plugins" --msgbox "The following plugins are enabled:\n$hornetEnablePlugins" 14 65
                else
                    whiptail --title "Hornet - Plugins" --msgbox "There are no plugins enabled for Hornet!" 8 65
                fi
                restartHornet=true
            fi
            unset setHornetEnablePlugins
        ;;
        "7)")
            setHornetDisablePlugins=true
            source $swarmConfigs/hornet.cfg
            currentHornetDisablePlugins=$hornetDisablePlugins
            source $hornetModules/hornetPlugins
            hornetDisablePlugins=$(whiptail --title "Hornet - Plugins" --checklist "\nSelect the Hornet plugins to be deactivated:" 10 78 1 \
                "warpsync" "Spammer to send messages into the tangle" $hornetWarpsync 3>&1 1>&2 2>&3)
            hornetDisablePlugins=$(echo $hornetDisablePlugins | tr -s '[:blank:]' ',' | tr -d '"')
            if [ "$hornetDisablePlugins" != "$currentHornetDisablePlugins" ] && [ ! -z "$hornetDisablePlugins" ]; then
                source $hornetConfigParsers/hornetDisablePlugins
                sudo sed -i 's/^hornetDisablePlugins=.*/hornetDisablePlugins="'$hornetDisablePlugins'"/' $swarmConfigs/hornet.cfg
                if [ ! -z "$hornetDisablePlugins" ]; then
                    whiptail --title "Hornet Plugins" --msgbox "The following plugins are disabled:\n$hornetDisablePlugins" 14 65
                else
                    whiptail --title "Hornet - Plugins" --msgbox "There are no plugins disabled for Hornet!" 8 65
                fi
                restartHornet=true
            fi
            unset setHornetDisablePlugins
        ;;
        "8)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet.cfg
                hornetVersion=$(hornet -v | awk '{ print $2 }')
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet - Identity" --menu "\nChoose an option" 14 65 0 \
                    "1)" "Set identity" \
                    "2)" "Generate new Identity" \
                    "3)" "Convert identityPrivateKey" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/hornet.cfg
                        currentHornetIdentity=$hornetIdentity
                        hornetIdentity=$(whiptail --inputbox "\nSet your own private key for the Identity" 10 65 --title "Hornet - Identity" 3>&1 1>&2 2>&3)
                        if [ "$hornetIdentity" != "$currentHornetIdentity" ] && [ ! -z "$hornetIdentity" ]; then
                            source $hornetConfigParsers/hornetIdentity
                            sudo sed -i 's~^hornetIdentity=.*~hornetIdentity="'$hornetIdentity'"~' $swarmConfigs/hornet.cfg
                            whiptail --title "Hornet - Identity" --msgbox "The following Identity key was set: \n$hornetIdentity!" 10 65
                        fi
                    ;;
                    "2)")
                        if (whiptail --title "Hornet - Identity" --yesno --defaultno "Are you sure you want to generate a new Identity (the existing one will be deleted)?" 8 65); then
                            unset hornetIdentity
                            source $hornetConfigParsers/hornetIdentity
                            whiptail --title "Hornet - Identity" --msgbox "The following p2pIdentity key was set: \n$hornetIdentity" 12 65
                            source $swarmConfigs/hornet.cfg
                        fi
                    ;;
                    "3)")
                        if (whiptail --title "Hornet - Identity" --yesno --defaultno "Are you sure you want to convert your previous identityPrivateKey?" 8 65); then
                            hornetP2pIdentity=$(whiptail --inputbox "\nEnter your identityPrivateKey" 10 65 --title "Hornet - Identity" 3>&1 1>&2 2>&3)
                            if [ ! -z "$identityPrivateKey" ]; then
                                source $hornetConfigParsers/hornetIdentity
                                if [ "$hornetIdentityUpdated" = "true" ]; then
                                    whiptail --title "Hornet - Identity" --msgbox "Your converted private key is: \n$hornetIdentity!" 10 65
                                    unset hornetIdentityUpdated
                                fi
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "9)")
            source $swarmConfigs/hornet.cfg
            if [ "$hornetAutoRevalidation" = "true" ]; then
                hornetAutoRevalidationStatus=enabled
            else
                hornetAutoRevalidationStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet - DB Revalidation" --menu "\nDatabase Revalidation: $hornetAutoRevalidationStatus\n\nChoose an option" 16 65 0 \
                "1)" "Enable DB revalidation" \
                "2)" "Disable DB revalidation" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    hornetAutoRevalidation=true
                    sudo sed -i 's/^hornetAutoRevalidation=.*/hornetAutoRevalidation=true/' $swarmConfigs/hornet.cfg
                    source $hornetConfigParsers/hornetAutoRevalidation
                    whiptail --title "Hornet - DB Revalidation" --msgbox "Hornet DB Revalidation enabled!" 8 65
                ;;
                "2)")
                    hornetAutoRevalidation=false
                    sudo sed -i 's/^hornetAutoRevalidation=.*/hornetAutoRevalidation=false/' $swarmConfigs/hornet.cfg
                    source $hornetConfigParsers/hornetAutoRevalidation
                    whiptail --title "Hornet - DB Revalidation" --msgbox "Hornet DB Revalidation disabled!" 8 65
                ;;
            esac
        ;;
        "10)")
            source $swarmConfigs/hornet.cfg
            currentHornetGossipPort=$hornetGossipPort
            hornetGossipPort=$(whiptail --inputbox "\nSet the gossip port for the neighbors communication." 10 65 $hornetGossipPort --title "Hornet - Gossip" 3>&1 1>&2 2>&3)
            if [ ! -z "$hornetGossipPort" ] && [ "$currentHornetGossipPort" != "$hornetGossipPort" ] && [ $hornetGossipPort -eq $hornetGossipPort ] 2>/dev/null; then
                if [ "$ufw" = "true" ]; then
                    sudo ufw delete allow $currentHornetGossipPort/tcp > /dev/null 2>&1
                    sudo ufw allow $hornetGossipPort/tcp > /dev/null 2>&1
                fi
                source $hornetConfigParsers/hornetGossipPort
                sudo sed -i 's/^hornetGossipPort=.*/hornetGossipPort='$hornetGossipPort'/' $swarmConfigs/hornet.cfg
                whiptail --title "Hornet - Gossip" --msgbox "Gossip port set to \"$hornetGossipPort/tcp\"!" 8 65
                restartHornet=true
            fi
        ;;
        "11)")
            source $swarmConfigs/hornet.cfg
            currentHornetAutopeeringPort=$hornetAutopeeringPort
            hornetAutopeeringPort=$(whiptail --inputbox "\nSet the autopeering port for the automatic neighbors detection." 10 65 $hornetAutopeeringPort --title "Hornet - Autopeering" 3>&1 1>&2 2>&3)
            if [ $hornetAutopeeringPort -eq $goshimmerAutopeeringPort ] 2>/dev/null; then
                whiptail --title "Hornet - Autopeering" --msgbox "Autopeering port \"$hornetAutopeeringPort\" is already in use for GoShimmer!" 8 65
            else
                if [ ! -z "$hornetAutopeeringPort" ] && [ "$currentHornetAutopeeringPort" != "$hornetAutopeeringPort" ] && [ $hornetAutopeeringPort -eq $hornetAutopeeringPort ] 2>/dev/null; then
                    if [ "$ufw" = "true" ]; then
                        sudo ufw delete allow $currentHornetAutopeeringPort/udp > /dev/null 2>&1
                        sudo ufw allow $hornetAutopeeringPort/udp > /dev/null 2>&1
                    fi
                    source $hornetConfigParsers/hornetAutopeeringPort
                    sudo sed -i 's/^hornetAutopeeringPort=.*/hornetAutopeeringPort='$hornetAutopeeringPort'/' $swarmConfigs/hornet.cfg
                    whiptail --title "Hornet - Autopeering" --msgbox "Autopeering port set to \"$hornetAutopeeringPort/udp\"!" 8 65
                fi
            fi
        ;;
        "12)")
            source $swarmConfigs/hornet.cfg
            currentHornetUnknownPeersLimit=$hornetUnknownPeersLimit
            hornetUnknownPeersLimit=$(whiptail --inputbox "\nSet the maximum amount of unknown neighbors." 10 65 $currentHornetUnknownPeersLimit --title "Hornet - Gossip" 3>&1 1>&2 2>&3)
            if [ "$currentHornetUnknownPeersLimit" != "$hornetUnknownPeersLimit" ] && [ $hornetUnknownPeersLimit -eq $hornetUnknownPeersLimit ] && [ ! -z "$hornetUnknownPeersLimit" ] 2>/dev/null; then
                source $hornetConfigParsers/hornetGossipUnknownPeersLimit
                sudo sed -i 's/^hornetUnknownPeersLimit=.*/hornetUnknownPeersLimit='$hornetUnknownPeersLimit'/' $swarmConfigs/hornet.cfg
                whiptail --title "Hornet - Gossip" --msgbox "Maximum of unknown neighbors set to \"$hornetUnknownPeersLimit\"!" 8 65
            fi
        ;;
        "13)")
            source $swarmConfigs/hornet.cfg
            # Hornet Networks
            CHOICE=$(
                whiptail --title "Hornet - Network" --menu "\nCurrent network: $hornetNetwork\n\nChoose an option" 16 65 0 \
                "1)" "Mainnet (default)" \
                "2)" "Comnet (dev)" \
                "3)" "Testnet (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet - Network" --yesno --defaultno "Are you sure you want to change the network to mainnet (the old database will be deleted)?" 8 65); then
                        currentHornetNetwork=$hornetNetwork
                        hornetNetwork=mainnet
                        sudo sed -i 's/^hornetNetwork=.*/hornetNetwork='$hornetNetwork'/' $swarmConfigs/hornet.cfg
                        source $hornetModules/hornetNetwork
                    fi
                ;;
                "2)")
                    if (whiptail --title "Hornet - Network" --yesno --defaultno "Are you sure you want to change the network to comnet (the old database will be deleted)?" 8 65); then
                        currentHornetNetwork=$hornetNetwork
                        hornetNetwork=comnet
                        sudo sed -i 's/^hornetNetwork=.*/hornetNetwork='$hornetNetwork'/' $swarmConfigs/hornet.cfg
                        source $hornetModules/hornetNetwork
                    fi
                ;;
                "3)")
                    if (whiptail --title "Hornet - Network" --yesno --defaultno "Are you sure you want to change the network to testnet (the old database will be deleted)?" 8 65); then
                        currentHornetNetwork=$hornetNetwork
                        hornetNetwork=testnet
                        sudo sed -i 's/^hornetNetwork=.*/hornetNetwork='$hornetNetwork'/' $swarmConfigs/hornet.cfg
                        source $hornetModules/hornetNetwork
                    fi
                ;;
            esac
        ;;
        "14)")
            source $swarmConfigs/hornet.cfg
            # Hornet release channel
            CHOICE=$(
                whiptail --title "Hornet - Release" --menu "\nSet \"stable\" for official release or \"testing\" for releases under development\n\nChoose an option" 16 65 0 \
                "1)" "Stable Channel (default)" \
                "2)" "Testing Channel (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet - Release" --yesno --defaultno "Are you sure you want to change the release channel to stable (hornet will be reinstalled)?" 8 65); then
                        currentHornetRelease=$hornetRelease
                        hornetRelease=stable
                        sudo sed -i 's/^hornetRelease=.*/hornetRelease='$hornetRelease'/' $swarmConfigs/hornet.cfg
                        source $hornetModules/hornetReleaseChannel
                        source $hornetModules/hornetParser
                    fi
                ;;
                "2)")
                    if (whiptail --title "Hornet - Release" --yesno --defaultno "Are you sure you want to change the release channel to stable (hornet will be reinstalled)?" 8 65); then
                        currentHornetRelease=$hornetRelease
                        hornetRelease=testing
                        sudo sed -i 's/^hornetRelease=.*/hornetRelease='$hornetRelease'/' $swarmConfigs/hornet.cfg
                        source $hornetModules/hornetReleaseChannel
                        source $hornetModules/hornetParser
                    fi
                ;;
            esac
        ;;
    esac
done
sudo chown -R hornet:hornet $hornetHome/*.json
exitCode=0