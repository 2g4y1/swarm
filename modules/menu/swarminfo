#!/bin/bash
status="$(systemctl show -p ActiveState --value $node)"

if [ "$apiprotection" = "true" ]; then
    if [ "$nodeport" = "443" ]; then
        dashboardurl="https://$domain"
        apiurl="https://$domain/auth"
    else
        dashboardurl="https://$domain:$nodeport"
        apiurl="https://$domain:$nodeport/auth"
    fi
else if [ "$apiprotection" = "false" ]; then
        if [ "$nodeport" = "443" ]; then
            dashboardurl="https://$domain"
            apiurl="https://$domain/access"
        else
            dashboardurl="https://$domain:$nodeport"
            apiurl="https://$domain:$nodeport/access"
        fi
    else
        dashboardurl="N/A"
        apiurl="N/A"
    fi
fi

if [ "$node" = "hornet" ]; then
    nodeversion="$(curl -s http://127.0.0.1:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{"command": "getNodeInfo"}' | jq -r '.appVersion')"
    if [ -z "$nodeversion" ]; then
        nodeversion="N/A"
    fi
    healthy="$(curl -s http://127.0.0.1:14265 -X POST -H 'Content-Type: application/json' -H 'X-IOTA-API-Version: 1' -d '{"command": "getNodeInfo"}' | jq '.isHealthy')"
    if [ -z "$healthy" ]; then
        healthy="N/A"
    fi

    if [ "$autoupdate" = "true" ]; then
        autoupdatevalue=enabled
    else
        autoupdatevalue=disabled
    fi

    # Sync Check
    if [ "$checksync" = "true" ]; then
        checksyncvalue=enabled
    else
        checksyncvalue=disabled
    fi

    if [ -z "$pruningdt" ]; then
        pruningdt="N/A"
    fi
fi

# Proxy Check
if [ "$proxycheck" = "true" ]; then
    proxycheckvalue=enabled
else
    proxycheckvalue=disabled
fi

if [ -z "$restartdt" ]; then
    restartdt="N/A"
fi

# Log Pruning
if [ "$logpruning" = "true" ]; then
    logpruning=enabled
else
    logpruning=disabled
fi

# DB size
if [ -d "$hornetdir/${network}db" ] && [ "$node" = "hornet" ]; then
    getcurrentdbsize="$(du -sb $hornetdir/${network}db/tangle.db | cut -f1)"
    let getcurrentdbsizeingb=$getcurrentdbsize/1000000000
    if [ "$getcurrentdbsizeingb" -le "0" ]; then
        let getcurrentdbsizeinmb=$getcurrentdbsize/1000000
        currentdbsize="$getcurrentdbsizeinmb MB"
    else
        currentdbsize="$getcurrentdbsizeingb GB"
    fi
else
    currentdbsize="N/A"
fi
if [ -d "$goshimmerdir/${network}db" ] && [ "$node" = "goshimmer" ]; then
    getcurrentdbsize="$(du -sb $hornetdir/${network}db | cut -f1)"
    let getcurrentdbsizeingb=$getcurrentdbsize/1000000000
    if [ "$getcurrentdbsizeingb" -le "0" ]; then
        let getcurrentdbsizeinmb=$getcurrentdbsize/1000000
        currentdbsize="$getcurrentdbsizeinmb MB"
    else
        currentdbsize="$getcurrentdbsizeingb GB"
    fi
else
    currentdbsize="N/A"
fi

# OUTPUT
if [ "$node" = "hornet" ]; then
    whiptail --title "SWARM Info [v$version]" --msgbox "Hornet: v$nodeversion\nNetwork: $network\nHealthy: $healthy\nDB size: $currentdbsize\n\nWatchdog: $watchdog\nAuto-updater: $autoupdatevalue\nSync-check: $checksyncvalue\nProxy-check: $proxycheckvalue\nLogpruning: $logpruning\nLast restart: $restartdt\n\nDBPruner: $dbpruner\nLast pruning: $pruningdt\n\nDash-URL: $dashboardurl\nAPI-URL: $apiurl" 23 65
fi
if [ "$node" = "goshimmer" ]; then
    whiptail --title "SWARM Info [v$version]" --msgbox "GoShimmer: $status\nDB size: $currentdbsize\n\nWatchdog: $watchdog\nProxy-check: $proxycheckvalue\nLogpruning: $logpruning\nLast restart: $restartdt\n\nDash-URL: $dashboardurl\nAPI-URL: $apiurl" 23 65
fi
