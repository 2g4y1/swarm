#!/bin/bash
crontab -l | grep -q "$watchdogCronCmd" && watchdogStatus=enabled || watchdogStatus=disabled
while [ $exitCode -lt 1 ]; do
    if [ "$swarmAutoUpdate" = "true" ]; then
        swarmAutoUpdateMenu="Disable"
    else
        swarmAutoUpdateMenu="Enable"
    fi
    if [ "$proxyCheck" = "true" ]; then
        proxyCheckMenu="Disable"
    else
        proxyCheckMenu="Enable"
    fi
    CHOICE=$(
        whiptail --title "SWARM Menu" --menu "\nWachtdog: $watchdogStatus\n\nChoose an option" 22 65 0 \
        "1)" "Watchdog [SWARM]" \
        "2)" "SWARM Theme" \
        "3)" "$swarmAutoUpdateMenu SWARM Autoupdate" \
        "4)" "Hornet [Watchdog]" \
        "5)" "Bee [Watchdog]" \
        "6)" "GoShimmer [Watchdog]" \
        "7)" "Log Rotation [SWARM]" 3>&2 2>&1 1>&3
    )
    exitStatus=$?
    if [ "$exitStatus" = "1" ]; then
        exitCode=1
    fi
    case $CHOICE in
        "1)")
            crontab -l | grep -q "$watchdogCronCmd" && watchdogStatus=enabled || watchdogStatus=disabled > /dev/null 2>&1
            # Control WATCHDOG
            CHOICE=$(
                whiptail --title "Watchdog Menu" --menu "\nWatchdog: $watchdogStatus\n\nChoose an option" 14 65 0 \
                "1)" "Enable Watchdog" \
                "2)" "Disable Watchdog" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    sudo chmod +x $swarmPlugins/watchdog
                    ( crontab -l | grep -v -F "$watchdogCronCmd" ; echo "$watchdogCronJob" ) | crontab - > /dev/null 2>&1
                    whiptail --title "Watchdog" --msgbox "Watchdog successfully activated!" 8 65
                ;;
                "2)")
                    ( crontab -l | grep -v -F "$watchdogCronCmd" ) | crontab - > /dev/null 2>&1
                    sudo sed -i "s,^statusCounter=.*,statusCounter=0," $logs/watchdog
                    sudo sed -i "s,^restartDate=.*,restartDate=," $logs/watchdog
                    whiptail --title "Watchdog" --msgbox "Watchdog successfully deactivated!" 8 65
                ;;
            esac
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/swarm.cfg
                CHOICE=$(
                    whiptail --title "SWARM - Theme" --menu "\nTheme: $swarmTheme\n\nChoose an option" 18 65 0 \
                    "1)" "Milkyway (default)" \
                    "2)" "HLM" \
                    "3)" "Mars" \
                    "4)" "Oreo" \
                    "5)" "Aftereight" \
                    "6)" "sMint" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        swarmTheme=milkyway
                        sudo sed -i 's/^swarmTheme=.*/swarmTheme="'$swarmTheme'"/' $swarmConfigs/swarm.cfg
                        source $swarmModules/swarmTheme
                        whiptail --title "Watchdog" --msgbox "SWARM swarmTheme \"$swarmTheme\" activated!" 8 65
                    ;;
                    "2)")
                        swarmTheme=hlm
                        sudo sed -i 's/^swarmTheme=.*/swarmTheme="'$swarmTheme'"/' $swarmConfigs/swarm.cfg
                        source $swarmModules/swarmTheme
                        whiptail --title "Watchdog" --msgbox "SWARM swarmTheme \"$swarmTheme\" activated!" 8 65
                    ;;
                    "3)")
                        swarmTheme=mars
                        sudo sed -i 's/^swarmTheme=.*/swarmTheme="'$swarmTheme'"/' $swarmConfigs/swarm.cfg
                        source $swarmModules/swarmTheme
                        whiptail --title "Watchdog" --msgbox "SWARM swarmTheme \"$swarmTheme\" activated!" 8 65
                    ;;
                    "4)")
                        swarmTheme=oreo
                        sudo sed -i 's/^swarmTheme=.*/swarmTheme="'$swarmTheme'"/' $swarmConfigs/swarm.cfg
                        source $swarmModules/swarmTheme
                        whiptail --title "Watchdog" --msgbox "SWARM swarmTheme \"$swarmTheme\" activated!" 8 65
                    ;;
                    "5)")
                        swarmTheme=aftereight
                        sudo sed -i 's/^swarmTheme=.*/swarmTheme="'$swarmTheme'"/' $swarmConfigs/swarm.cfg
                        source $swarmModules/swarmTheme
                        whiptail --title "Watchdog" --msgbox "SWARM swarmTheme \"$swarmTheme\" activated!" 8 65
                    ;;
                    "6)")
                        swarmTheme=smint
                        sudo sed -i 's/^swarmTheme=.*/swarmTheme="'$swarmTheme'"/' $swarmConfigs/swarm.cfg
                        source $swarmModules/swarmTheme
                        whiptail --title "Watchdog" --msgbox "SWARM swarmTheme \"$swarmTheme\" activated!" 8 65
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/swarm.cfg
                if [ "$swarmAutoUpdate" = "true" ]; then
                    swarmAutoUpdateStatus=enabled
                else
                    swarmAutoUpdateStatus=disabled
                fi
                CHOICE=$(
                    whiptail --title "SWARM - Update" --menu "\nSWARM Updater: $swarmAutoUpdateStatus\n\nChoose an option" 14 65 0 \
                    "1)" "Enable SWARM autoupdater" \
                    "2)" "Disable SWARM autoupdater" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        sudo sed -i 's/^swarmAutoUpdate=.*/swarmAutoUpdate=true/' $swarmConfigs/swarm.cfg
                        whiptail --title "SWARM - Update" --msgbox "SWARM updater enabled!" 8 65
                    ;;
                    "2)")
                        sudo sed -i 's/^swarmAutoUpdate=.*/swarmAutoUpdate=false/' $swarmConfigs/swarm.cfg
                        whiptail --title "SWARM - Update" --msgbox "SWARM updater disabled!" 8 65
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/swarm.cfg
                if [ "$hornetAutoUpdate" = "true" ]; then
                    hornetAutoUpdateMenu="Disable"
                else
                    hornetAutoUpdateMenu="Enable"
                fi
                if [ "$hornetAllowDbReset" = "true" ]; then
                    hornetAllowDbResetMenu="Forbid"
                else
                    hornetAllowDbResetMenu="Allow"
                fi

                CHOICE=$(
                    whiptail --title "SWARM - Hornet" --menu "\nChoose an option" 14 65 0 \
                    "1)" "$hornetAutoUpdateMenu Hornet AutoUpdater" \
                    "2)" "$hornetAllowDbResetMenu Hornet database reset" \
                    "3)" "Hornet Sync-Check" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$hornetAutoUpdate" = "true" ]; then
                            hornetAutoUpdate=false
                            hornetAutoUpdateMenu="disabled"
                        else
                            hornetAutoUpdate=true
                            hornetAutoUpdateMenu="enabled"
                        fi
                        sudo sed -i 's/^hornetAutoUpdate=.*/hornetAutoUpdate='$hornetAutoUpdate'/' $swarmConfigs/swarm.cfg
                        whiptail --title "Watchdog - Hornet" --msgbox "Hornet AutoUpdater $hornetAutoUpdateMenu!" 8 65
                    ;;
                    "2)")
                        if [ "$hornetAllowDbReset" = "true" ]; then
                            hornetAllowDbReset=false
                            hornetAllowDbResetMenu="disabled"
                        else
                            hornetAllowDbReset=true
                            hornetAllowDbResetMenu="enabled"
                        fi
                        sudo sed -i 's/^hornetAllowDbReset=.*/hornetAllowDbReset='$hornetAllowDbReset'/' $swarmConfigs/swarm.cfg
                        whiptail --title "SWARM - Hornet" --msgbox "Delete Hornet database $hornetAllowDbResetMenu for Watchdog!" 8 65
                    ;;
                    "3)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/swarm.cfg
                            if [ "$hornetCheckSync" = "true" ]; then
                                hornetCheckSyncMenu="Disable"
                            else
                                hornetCheckSyncMenu="Enable"
                            fi
                            CHOICE=$(
                                whiptail --title "Watchdog - Hornet" --menu "\nChoose an option" 14 65 0 \
                                "1)" "$hornetCheckSyncMenu Sync-Check" \
                                "2)" "Set max milestones" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    if [ "$hornetCheckSync" = "true" ]; then
                                        hornetCheckSync=false
                                        hornetCheckSyncMenu="disabled"
                                    else
                                        hornetCheckSync=true
                                        hornetCheckSyncMenu="enabled"
                                    fi
                                    sudo sed -i 's/^hornetCheckSync=.*/hornetCheckSync='$hornetCheckSync'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "SWARM - Hornet Sync" --msgbox "Hornet sync check $hornetCheckSyncMenu!" 8 65
                                ;;
                                "2)")
                                    source $swarmConfigs/swarm.cfg
                                    hornetMaxMilestones=$(whiptail --inputbox "\nSet the maximum difference between LMI and LSMI before the resync starts and a new database/snapshot is initialized" 10 65 $hornetMaxMilestones --title "Watchdog - Hornet Sync" 3>&1 1>&2 2>&3)
                                    if [ $hornetMaxMilestones -eq $hornetMaxMilestones ] && [ $hornetMaxMilestones -gt 0 ] 2>/dev/null; then
                                        sudo sed -i 's/^hornetMaxMilestones=.*/hornetMaxMilestones='$hornetMaxMilestones'/' $swarmConfigs/swarm.cfg
                                        whiptail --title "Watchdog - Hornet Sync" --msgbox "Max milestones for Hornet set to $hornetMaxMilestones milestones!" 8 65
                                    fi
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                esac
            done
            exitCode=0
        ;;
        "5)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/swarm.cfg
                if [ "$beeAutoUpdate" = "true" ]; then
                    beeAutoUpdateMenu="Disable"
                else
                    beeAutoUpdateMenu="Enable"
                fi
                if [ "$beeAllowDbReset" = "true" ]; then
                    beeAllowDbResetMenu="Forbid"
                else
                    beeAllowDbResetMenu="Allow"
                fi

                CHOICE=$(
                    whiptail --title "SWARM - Bee" --menu "\nChoose an option" 14 65 0 \
                    "1)" "$beeAutoUpdateMenu Bee AutoUpdater" \
                    "2)" "$beeAllowDbResetMenu Bee database reset" \
                    "3)" "Bee Sync-Check" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$beeAutoUpdate" = "true" ]; then
                            beeAutoUpdate=false
                            beeAutoUpdateMenu="disabled"
                        else
                            beeAutoUpdate=true
                            beeAutoUpdateMenu="enabled"
                        fi
                        sudo sed -i 's/^beeAutoUpdate=.*/beeAutoUpdate='$beeAutoUpdate'/' $swarmConfigs/swarm.cfg
                        whiptail --title "Watchdog - Bee" --msgbox "Bee AutoUpdater $beeAutoUpdateMenu!" 8 65
                    ;;
                    "2)")
                        if [ "$beeAllowDbReset" = "true" ]; then
                            beeAllowDbReset=false
                            beeAllowDbResetMenu="disabled"
                        else
                            beeAllowDbReset=true
                            beeAllowDbResetMenu="enabled"
                        fi
                        sudo sed -i 's/^beeAllowDbReset=.*/beeAllowDbReset='$beeAllowDbReset'/' $swarmConfigs/swarm.cfg
                        whiptail --title "SWARM - Bee" --msgbox "Delete Bee database $beeAllowDbResetMenu for Watchdog!" 8 65
                    ;;
                    "3)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/swarm.cfg
                            if [ "$beeCheckSync" = "true" ]; then
                                beeCheckSyncMenu="Disable"
                            else
                                beeCheckSyncMenu="Enable"
                            fi
                            CHOICE=$(
                                whiptail --title "Watchdog - Bee" --menu "\nChoose an option" 14 65 0 \
                                "1)" "$beeCheckSyncMenu Sync-Check" \
                                "2)" "Set max milestones" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    if [ "$beeCheckSync" = "true" ]; then
                                        beeCheckSync=false
                                        beeCheckSyncMenu="disabled"
                                    else
                                        beeCheckSync=true
                                        beeCheckSyncMenu="enabled"
                                    fi
                                    sudo sed -i 's/^beeCheckSync=.*/beeCheckSync='$beeCheckSync'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "SWARM - Bee Sync" --msgbox "Bee sync check $beeCheckSyncMenu!" 8 65
                                ;;
                                "2)")
                                    source $swarmConfigs/swarm.cfg
                                    beeMaxLmi=$(whiptail --inputbox "\nSet the maximum difference between LMI and LSMI before the resync starts and a new database/snapshot is initialized" 10 65 $beeMaxMilestones --title "Watchdog - Bee Sync" 3>&1 1>&2 2>&3)
                                    if [ $beeMaxMilestones -eq $beeMaxMilestones ] && [ $beeMaxMilestones -gt 0 ] 2>/dev/null; then
                                        sudo sed -i 's/^beeMaxMilestones=.*/beeMaxMilestones='$beeMaxMilestones'/' $swarmConfigs/swarm.cfg
                                        whiptail --title "Watchdog - Bee Sync" --msgbox "Max milestones for Bee set to $beeMaxMilestones milestones!" 8 65
                                    fi
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                esac
            done
            exitCode=0
        ;;
        "6)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/swarm.cfg
                if [ "$goshimmerAutoUpdate" = "true" ]; then
                    goshimmerAutoUpdateMenu="Disable"
                else
                    goshimmerAutoUpdateMenu="Enable"
                fi
                if [ "$goshimmerAllowDbReset" = "true" ]; then
                    goshimmerAllowDbResetMenu="Forbid"
                else
                    goshimmerAllowDbResetMenu="Allow"
                fi
                if [ "$goshimmerCheckSync" = "true" ]; then
                    goshimmerCheckSyncMenu="Disable"
                else
                    goshimmerCheckSyncMenu="Enable"
                fi

                CHOICE=$(
                    whiptail --title "SWARM - GoShimmer" --menu "\nChoose an option" 14 65 0 \
                    "1)" "$goshimmerAutoUpdateMenu GoShimmer AutoUpdater" \
                    "2)" "$goshimmerAllowDbResetMenu GoShimmer database reset" \
                    "3)" "$goshimmerCheckSyncMenu GoShimmer Sync-Check" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$goshimmerAutoUpdate" = "true" ]; then
                            goshimmerAutoUpdate=false
                            goshimmerAutoUpdateMenu="disabled"
                        else
                            goshimmerAutoUpdate=true
                            goshimmerAutoUpdateMenu="enabled"
                        fi
                        sudo sed -i 's/^goshimmerAutoUpdate=.*/goshimmerAutoUpdate='$goshimmerAutoUpdate'/' $swarmConfigs/swarm.cfg
                        whiptail --title "Watchdog - GoShimmer" --msgbox "GoShimmer AutoUpdater $goshimmerAutoUpdateMenu!" 8 65
                    ;;
                    "2)")
                        if [ "$goshimmerAllowDbReset" = "true" ]; then
                            goshimmerAllowDbReset=false
                            goshimmerAllowDbResetMenu="disabled"
                        else
                            goshimmerAllowDbReset=true
                            goshimmerAllowDbResetMenu="enabled"
                        fi
                        sudo sed -i 's/^goshimmerAllowDbReset=.*/goshimmerAllowDbReset='$goshimmerAllowDbReset'/' $swarmConfigs/swarm.cfg
                        whiptail --title "SWARM - GoShimmer" --msgbox "Delete GoShimmer database $goshimmerAllowDbResetMenu for Watchdog!" 8 65
                    ;;
                    "3)")
                        if [ "$goshimmerCheckSync" = "true" ]; then
                            goshimmerCheckSync=false
                            goshimmerCheckSyncMenu="disabled"
                        else
                            goshimmerCheckSync=true
                            goshimmerCheckSyncMenu="enabled"
                        fi
                        sudo sed -i 's/^goshimmerCheckSync=.*/goshimmerCheckSync='$goshimmerCheckSync'/' $swarmConfigs/swarm.cfg
                        whiptail --title "SWARM - GoShimmer" --msgbox "GoShimmer sync check $goshimmerCheckSyncMenu!" 8 65
                    ;;
                esac
            done
            exitCode=0
        ;;
        "7)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/swarm.cfg
                if [ "$swarmLogRotation" = "true" ]; then
                    swarmLogRotationMenu="Disable"
                else
                    swarmLogRotationMenu="Enable"
                fi
                CHOICE=$(
                    whiptail --title "Watchdog - SWARM Log" --menu "\nChoose an option" 14 65 0 \
                    "1)" "$swarmLogRotationMenu log rotation" \
                    "2)" "Set log size" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$swarmLogRotation" = "true" ]; then
                            swarmLogRotation=false
                            swarmLogRotationMenu="disabled"
                        else
                            swarmLogRotation=true
                            swarmLogRotationMenu="enabled"
                        fi
                        sudo sed -i 's/^swarmLogRotation=.*/swarmLogRotation='$swarmLogRotation'/' $swarmConfigs/swarm.cfg
                        whiptail --title "Watchdog - SWARM Log" --msgbox "Log rotation $swarmLogRotationMenu!" 8 65
                    ;;
                    "2)")
                        source $swarmConfigs/swarm.cfg
                        logSize=$(whiptail --inputbox "\nSet max log file size in Megabyte (MB)" 10 65 $swarmLogSize --title "Watchdog - SWARM Log" 3>&1 1>&2 2>&3)
                        if [ ! -z "$swarmLogSize" ] && [ $swarmLogSize -gt 0 ] 2>/dev/null; then
                            sudo sed -i 's/^swarmLogSize=.*/swarmLogSize='$swarmLogSize'/' $swarmConfigs/swarm.cfg
                            whiptail --title "Watchdog - SWARM Log" --msgbox "Log size set to ${swarmLogSize}MB!" 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
    esac
done
exitCode=0