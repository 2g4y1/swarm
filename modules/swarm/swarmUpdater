#!/bin/bash

if [ "$swarmManualUpdate" = "true" ]; then
    {
        echo 0
        echo 10
        if [ ! -d "$swarmTmp" ]; then
            sudo mkdir -p $swarmTmp > /dev/null 2>&1
        fi
        echo 20
        sudo cp -rf $swarmConfigs/swarm.cfg $swarmTmp/swarm.cfg
        sudo cp -rf $swarmConfigs/hornet.cfg $swarmTmp/hornet.cfg
        sudo cp -rf $swarmConfigs/bee.cfg $swarmTmp/bee.cfg
        sudo cp -rf $swarmConfigs/goshimmer.cfg $swarmTmp/goshimmer.cfg
        sudo cp -rf $swarmConfigs/wasp.cfg $swarmTmp/wasp.cfg
        sudo cp -rf $swarmConfigs/proxy.cfg $swarmTmp/proxy.cfg
        sudo cp -rf $swarmConfigs/watchdog.cfg $swarmTmp/watchdog.cfg
        echo 30
        currentBranch=$( cd $swarmHome ; git rev-parse --abbrev-ref HEAD )
        ( cd $swarmHome ; sudo git pull ) > /dev/null 2>&1
        ( cd $swarmHome ; sudo git reset --hard origin/$currentBranch ) > /dev/null 2>&1
        sudo chmod +x $swarmHome/swarm $swarmPlugins/watchdog > /dev/null 2>&1
        echo 40

        # Load new env
        source /var/lib/swarm/environment

        source $swarmModules/swarmParser

        echo 50

        if [ -f "/usr/bin/hornet" ]; then
            # source $swarmConfigs/hornet.cfg
            source $hornetModules/hornetParser
            if [ "$restartHornet" = "true" ]; then
                sudo systemctl restart hornet
                unset restartHornet
            fi
        fi
        echo 60
        if [ -f "/usr/bin/bee" ]; then
            ignoreBeePeersUpdate=true
            source $beeModules/beeParser
            if [ "$restartBee" = "true" ]; then
                sudo systemctl restart bee
                unset restartBee
            fi
        fi
        echo 70
        if [ -f "/usr/bin/goshimmer" ]; then
            # source $swarmConfigs/hornet.cfg
            source $goshimmerModules/goshimmerParser
            if [ "$restartGoshimmer" = "true" ]; then
                sudo systemctl restart goshimmer
                unset restartGoshimmer
            fi
        fi
        echo 80
        if [ -f "/usr/bin/wasp" ]; then
            source $waspModules/waspParser
            if [ "$restartWasp" = "true" ]; then
                sudo systemctl restart wasp
                unset restartWasp
            fi
        fi
        echo 90
        if [ "$proxyAutomaticDeploy" = "true" ]; then
            source $proxyModules/proxyAutomaticDeployment
        fi
        echo 100

    } | whiptail --gauge "Updating SWARM..." 6 65 0
    whiptail --title "SWARM Menu" --msgbox "SWARM successfully updated!" 8 65
    clear
    exit 0
else
    if [ ! -d "$swarmTmp" ]; then
        sudo mkdir -p $swarmTmp > /dev/null 2>&1
    fi

    sudo cp -rf $swarmConfigs/swarm.cfg $swarmTmp/swarm.cfg
    sudo cp -rf $swarmConfigs/hornet.cfg $swarmTmp/hornet.cfg
    sudo cp -rf $swarmConfigs/bee.cfg $swarmTmp/bee.cfg
    sudo cp -rf $swarmConfigs/goshimmer.cfg $swarmTmp/goshimmer.cfg
    sudo cp -rf $swarmConfigs/wasp.cfg $swarmTmp/wasp.cfg
    sudo cp -rf $swarmConfigs/proxy.cfg $swarmTmp/proxy.cfg
    sudo cp -rf $swarmConfigs/watchdog.cfg $swarmTmp/watchdog.cfg

    currentBranch=$( cd $swarmHome ; git rev-parse --abbrev-ref HEAD )
    ( cd $swarmHome ; sudo git pull ) > /dev/null 2>&1
    ( cd $swarmHome ; sudo git reset --hard origin/$currentBranch ) > /dev/null 2>&1
    sudo chmod +x $swarmHome/swarm $swarmPlugins/watchdog > /dev/null 2>&1

    # Load new env
    source /var/lib/swarm/environment

    source $swarmModules/swarmParser

    if [ -f "/usr/bin/hornet" ]; then
        source $hornetModules/hornetParser
        if [ "$restartHornet" = "true" ]; then
            sudo systemctl restart hornet
            unset restartHornet
        fi
    fi
    if [ -f "/usr/bin/bee" ]; then
        source $beeModules/beeParser
        if [ "$restartBee" = "true" ]; then
            sudo systemctl restart bee
            unset restartBee
        fi
    fi
    if [ -f "/usr/bin/goshimmer" ]; then
        source $goshimmerModules/goshimmerParser
        if [ "$restartGoshimmer" = "true" ]; then
            sudo systemctl restart goshimmer
            unset restartGoshimmer
        fi
    fi
    if [ -f "/usr/bin/wasp" ]; then
        source $waspModules/waspParser
        if [ "$restartWasp" = "true" ]; then
            sudo systemctl restart wasp
            unset restartWasp
        fi
    fi
    if [ "$proxyAutomaticDeploy" = "true" ]; then
        source $proxyModules/proxyAutomaticDeployment
    fi
fi