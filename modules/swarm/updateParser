#!/bin/bash

if [ -f "$configs/hornetCfgBak" ]; then
    mv $configs/hornetCfgBak $configs/hornet-backup.cfg
fi
if [ -f "$configs/swarmCfgBak" ]; then
    mv $configs/swarmCfgBak $configs/swarm-backup.cfg
fi
if [ -f "$configs/proxyCfgBak" ]; then
    mv $configs/proxyCfgBak $configs/proxy-backup.cfg
fi
if [ -f "$logs/watchdogBak" ]; then
    mv $logs/watchdogBak $logs/watchdog-backup.cfg
fi

###########################################################################################################################
if [ -f "$configs/hornet-backup.cfg" ]; then
    source $configs/hornet-backup.cfg
    # Upater for Hornet.cfg
    if [ -z "$release" ]; then
        sudo sed -i 's/^release=.*/release="stable"/' $configs/hornet.cfg
    else
        sudo sed -i 's/^release=.*/release="'$release'"/' $configs/hornet.cfg
    fi

    if [ -z "$network" ]; then
        sudo sed -i 's/^network=.*/network="mainnet"/' $configs/hornet.cfg
    else
        sudo sed -i 's/^network=.*/network="'$network'"/' $configs/hornet.cfg
    fi

    if [ -z "$nodeAlias" ]; then
        sudo sed -i 's/^nodeAlias=.*/nodeAlias="Hornet"/' $configs/hornet.cfg
    else
        sudo sed -i 's/^nodeAlias=.*/nodeAlias="'$nodeAlias'"/' $configs/hornet.cfg
    fi

    if [ -z "$disablePlugins" ]; then
        sudo sed -i 's/^disablePlugins=.*/disablePlugins=""/' $configs/hornet.cfg
    else
        sudo sed -i 's/^disablePlugins=.*/disablePlugins="'$disablePlugins'"/' $configs/hornet.cfg
    fi

    if [ -z "$enablePlugins" ]; then
        autopeeringDisabled=$(echo $disablePlugins | grep -o autopeering)
        if [ -z "$autopeeringDisabled" ]; then
            sudo sed -i 's/^enablePlugins=.*/enablePlugins="autopeering"/' $configs/hornet.cfg
        else
            sudo sed -i 's/^enablePlugins=.*/enablePlugins=""/' $configs/hornet.cfg
        fi
    else
        autopeeringEnabled=$(echo $enablePlugins | grep -o autopeering)
        autopeeringDisabled=$(echo $disablePlugins | grep -o autopeering)
        if [ -z "$autopeeringEnabled" ] && [ -z "$autopeeringDisabled" ]; then
            enablePlugins="autopeering,$enablePlugins"
        fi
        sudo sed -i 's/^enablePlugins=.*/enablePlugins="'$enablePlugins'"/' $configs/hornet.cfg
    fi

    if [ -z "$maxUnknownNeighbors" ]; then
        sudo sed -i 's/^maxUnknownNeighbors=.*/maxUnknownNeighbors=2/' $configs/hornet.cfg
    else
        sudo sed -i 's/^maxUnknownNeighbors=.*/maxUnknownNeighbors='$maxUnknownNeighbors'/' $configs/hornet.cfg
    fi

    if [ -z "$snapshotInterval" ]; then
        sudo sed -i 's/^snapshotInterval=.*/snapshotInterval=8640/' $configs/hornet.cfg
    else
        sudo sed -i 's/^snapshotInterval=.*/snapshotInterval='$snapshotInterval'/' $configs/hornet.cfg
    fi

    if [ -z "$gossipPort" ]; then
        sudo sed -i 's/^gossipPort=.*/gossipPort=15600/' $configs/hornet.cfg
    else
        sudo sed -i 's/^gossipPort=.*/gossipPort='$gossipPort'/' $configs/hornet.cfg
    fi

    if [ -z "$autopeeringPort" ]; then
        sudo sed -i 's/^autopeeringPort=.*/autopeeringPort=14626/' $configs/hornet.cfg
    else
        sudo sed -i 's/^autopeeringPort=.*/autopeeringPort='$autopeeringPort'/' $configs/hornet.cfg
    fi

    if [ -z "$pow" ]; then
        sudo sed -i 's/^pow=.*/pow=false/' $configs/hornet.cfg
    else
        sudo sed -i 's/^pow=.*/pow='$pow'/' $configs/hornet.cfg
    fi

    if [ -z "$powWorkerCount" ]; then
        sudo sed -i 's/^powWorkerCount=.*/powWorkerCount=1/' $configs/hornet.cfg
    else
        sudo sed -i 's/^powWorkerCount=.*/powWorkerCount='$powWorkerCount'/' $configs/hornet.cfg
    fi

    if [ -z "$dbEngine" ]; then
        sudo sed -i 's/^dbEngine=.*/dbEngine="rocksdb"/' $configs/hornet.cfg
    else
        sudo sed -i 's/^dbEngine=.*/dbEngine="'$dbEngine'"/' $configs/hornet.cfg
    fi

    if [ -z "$autoRevalidation" ]; then
        sudo sed -i 's/^autoRevalidation=.*/autoRevalidation=false/' $configs/hornet.cfg
    else
        sudo sed -i 's/^autoRevalidation=.*/autoRevalidation='$autoRevalidation'/' $configs/hornet.cfg
    fi

    if [ -z "$pruning" ]; then
        sudo sed -i 's/^pruning=.*/pruning=true/' $configs/hornet.cfg
    else
        sudo sed -i 's/^pruning=.*/pruning='$pruning'/' $configs/hornet.cfg
    fi

    if [ -z "$dbPruner" ]; then
        sudo sed -i 's/^dbPruner=.*/dbPruner="hornet"/' $configs/hornet.cfg
    else
        if [ "$dbPruner" = "swarm" ]; then
            crontab -l | grep -q "$dbPrunerCronCmd" > /dev/null 2>&1 && ( crontab -l | grep -v -F "$dbPrunerCronCmd" ) | crontab - > /dev/null 2>&1
            dbPruner="hornet"
            source $modules/hornet/configParsers/pruning
            sudo systemctl restart hornet
        fi
        sudo sed -i 's/^dbPruner=.*/dbPruner="'$dbPruner'"/' $configs/hornet.cfg
    fi

    if [ -z "$pruningDatabaseSize" ]; then
        sudo sed -i 's/^pruningDatabaseSize=.*/pruningDatabaseSize=/' $configs/hornet.cfg
    else
        sudo sed -i 's/^pruningDatabaseSize=.*/pruningDatabaseSize='$pruningDatabaseSize'/' $configs/hornet.cfg
    fi

    if [ -z "$pruningPercentage" ]; then
        sudo sed -i 's/^pruningPercentage=.*/pruningPercentage=5.0/' $configs/hornet.cfg
    else
        sudo sed -i 's/^pruningPercentage=.*/pruningPercentage='$pruningPercentage'/' $configs/hornet.cfg
    fi

    if [ -z "$pruningCooldownTime" ]; then
        sudo sed -i 's/^pruningCooldownTime=.*/pruningCooldownTime=5/' $configs/hornet.cfg
    else
        sudo sed -i 's/^pruningCooldownTime=.*/pruningCooldownTime='$pruningCooldownTime'/' $configs/hornet.cfg
    fi

    if [ -z "$username" ]; then
        sudo sed -i 's/^username=.*/username=""/' $configs/hornet.cfg
    else
        sudo sed -i 's/^username=.*/username="'$username'"/' $configs/hornet.cfg
    fi

    if [ -z "$passwordHash" ]; then
        sudo sed -i 's/^passwordHash=.*/passwordHash="0000000000000000000000000000000000000000000000000000000000000000"/' $configs/hornet.cfg
    else
        sudo sed -i 's/^passwordHash=.*/passwordHash="'$passwordHash'"/' $configs/hornet.cfg
    fi

    if [ -z "$passwordSalt" ]; then
        sudo sed -i 's/^passwordSalt=.*/passwordSalt="0000000000000000000000000000000000000000000000000000000000000000"/' $configs/hornet.cfg
    else
        sudo sed -i 's/^passwordSalt=.*/passwordSalt="'$passwordSalt'"/' $configs/hornet.cfg
    fi

    if [ -z "$p2pIdentity" ]; then
        sudo sed -i 's/^p2pIdentity=.*/p2pIdentity=""/' $configs/hornet.cfg
    else
        sudo sed -i 's/^p2pIdentity=.*/p2pIdentity="'$p2pIdentity'"/' $configs/hornet.cfg
    fi

    if [ "$network" = "mainnet" ]; then
        if [ -z "$validation" ]; then
            sudo sed -i 's/^validation=.*/validation=true/' $configs/hornet.cfg
        else
            sudo sed -i 's/^validation=.*/validation='$validation'/' $configs/hornet.cfg
        fi
    else
        sudo sed -i 's/^validation=.*/validation=false/' $configs/hornet.cfg
    fi

    if [ -z "$validationLog" ]; then
        sudo sed -i 's/^validationLog=.*/validationLog=false/' $configs/hornet.cfg
    else
        sudo sed -i 's/^validationLog=.*/validationLog='$validationLog'/' $configs/hornet.cfg
    fi

    if [ -z "$runAsEntryNode" ]; then
        sudo sed -i 's/^runAsEntryNode=.*/runAsEntryNode=false/' $configs/hornet.cfg
    else
        sudo sed -i 's/^runAsEntryNode=.*/runAsEntryNode='$runAsEntryNode'/' $configs/hornet.cfg
    fi

    if [ -z "$jwtAuthEnabled" ]; then
        sudo sed -i 's/^jwtAuthEnabled=.*/jwtAuthEnabled=false/' $configs/hornet.cfg
    else
        sudo sed -i 's/^jwtAuthEnabled=.*/jwtAuthEnabled='$jwtAuthEnabled'/' $configs/hornet.cfg
    fi

    if [ -z "$jwtAuthSalt" ]; then
        sudo sed -i 's/^jwtAuthSalt=.*/jwtAuthSalt="HORNET"/' $configs/hornet.cfg
    else
        sudo sed -i 's/^jwtAuthSalt=.*/jwtAuthSalt="'$jwtAuthSalt'"/' $configs/hornet.cfg
    fi

    # Delete Bak file
    rm -rf $configs/hornet-backup.cfg
fi

####################################################################################################################################

if [ -f "$configs/goshimmer-backup.cfg" ]; then
    node=goshimmer
    source $configs/goshimmer-backup.cfg

    if [ -z "$goshimmerDashboardAuthEnbaled" ]; then
        sudo sed -i 's/^goshimmerDashboardAuthEnbaled=.*/goshimmerDashboardAuthEnbaled="false"/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerDashboardAuthEnbaled=.*/goshimmerDashboardAuthEnbaled='$goshimmerDashboardAuthEnbaled'/' $configs/$node.cfg
    fi

    if [ -z "$goshimmerDashboardUsername" ]; then
        sudo sed -i 's/^goshimmerDashboardUsername=.*/goshimmerDashboardUsername=""/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerDashboardUsername=.*/goshimmerDashboardUsername="'$goshimmerDashboardUsername'"/' $configs/$node.cfg
    fi

    if [ -z "$goshimmerDashboardPassword" ]; then
        sudo sed -i 's/^goshimmerDashboardPassword=.*/goshimmerDashboardPassword=""/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerDashboardPassword=.*/goshimmerDashboardPassword="'$goshimmerDashboardPassword'"/' $configs/$node.cfg
    fi

    if [ -z "$goshimmerWebapiAuthEnbaled" ]; then
        sudo sed -i 's/^goshimmerWebapiAuthEnbaled=.*/goshimmerWebapiAuthEnbaled="false"/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerWebapiAuthEnbaled=.*/goshimmerWebapiAuthEnbaled='$goshimmerWebapiAuthEnbaled'/' $configs/$node.cfg
    fi

    if [ -z "$goshimmerWebapiUsername" ]; then
        sudo sed -i 's/^goshimmerWebapiUsername=.*/goshimmerWebapiUsername=""/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerWebapiUsername=.*/goshimmerWebapiUsername="'$goshimmerWebapiUsername'"/' $configs/$node.cfg
    fi

    if [ -z "$goshimmerWebapiPassword" ]; then
        sudo sed -i 's/^goshimmerWebapiPassword=.*/goshimmerWebapiPassword=""/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerWebapiPassword=.*/goshimmerWebapiPassword="'$goshimmerWebapiPassword'"/' $configs/$node.cfg
    fi

    if [ -z "$goshimmerDisablePlugins" ]; then
        sudo sed -i 's/^goshimmerDisablePlugins=.*/goshimmerDisablePlugins=""/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerDisablePlugins=.*/goshimmerDisablePlugins="'$goshimmerDisablePlugins'"/' $configs/$node.cfg
    fi

    if [ -z "$goshimmerEnablePlugins" ]; then
        sudo sed -i 's/^goshimmerEnablePlugins=.*/goshimmerEnablePlugins=""/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerEnablePlugins=.*/goshimmerEnablePlugins="'$goshimmerEnablePlugins'"/' $configs/$node.cfg
    fi

    if [ -z "$goshimmerGossipPort" ]; then
        sudo sed -i 's/^goshimmerGossipPort=.*/goshimmerGossipPort=14666/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerGossipPort=.*/goshimmerGossipPort='$goshimmerGossipPort'/' $configs/$node.cfg
    fi

    if [ -z "$goshimmerAutopeeringPort" ]; then
        sudo sed -i 's/^goshimmerAutopeeringPort=.*/goshimmerAutopeeringPort=14626/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerAutopeeringPort=.*/goshimmerAutopeeringPort='$goshimmerAutopeeringPort'/' $configs/$node.cfg
    fi

    if [ -z "$goshimmerSeed" ]; then
        sudo sed -i 's/^goshimmerSeed=.*/goshimmerSeed=""/' $configs/$node.cfg
    else
        sudo sed -i 's/^goshimmerSeed=.*/goshimmerSeed="'$goshimmerSeed'"/' $configs/$node.cfg
    fi

    # Delete Bak file
    rm -rf $configs/goshimmer-backup.cfg
    unset node
fi

####################################################################################################################################


if [ -f "$configs/proxy-backup.cfg" ]; then
    source $configs/proxy-backup.cfg
    # Upater for Nginx.cfg
    if [ -z "$domain" ]; then
        sudo sed -i 's/^domain=.*/domain="myhornetnode.domain.tld"/' $configs/proxy.cfg
    else
        sudo sed -i 's/^domain=.*/domain="'$domain'"/' $configs/proxy.cfg
    fi

    if [ -z "$apiPort" ]; then
        sudo sed -i 's/^apiPort=.*/apiPort=443/' $configs/proxy.cfg
    else
        sudo sed -i 's/^apiPort=.*/apiPort='$apiPort'/' $configs/proxy.cfg
    fi

    # Delete Bak file
    rm -rf $configs/proxy-backup.cfg
fi

####################################################################################################################################

if [ -f "$configs/swarm-backup.cfg" ]; then
    source $configs/swarm-backup.cfg
    # Upater for SWARM.cfg
    if [ -z "$updateNotifier" ]; then
        sudo sed -i 's/^updateNotifier=.*/updateNotifier=true/' $configs/swarm.cfg
    else
        sudo sed -i 's/^updateNotifier=.*/updateNotifier='$updateNotifier'/' $configs/swarm.cfg
    fi

    if [ -z "$theme" ]; then
        sudo sed -i 's/^theme=.*/theme="default"/' $configs/swarm.cfg
    else
        sudo sed -i 's/^theme=.*/theme="'$theme'"/' $configs/swarm.cfg
    fi

    if [ -z "$swarmAutoUpdate" ]; then
        sudo sed -i 's/^swarmAutoUpdate=.*/swarmAutoUpdate=true/' $configs/swarm.cfg
    else
        sudo sed -i 's/^swarmAutoUpdate=.*/swarmAutoUpdate='$swarmAutoUpdate'/' $configs/swarm.cfg
    fi

    if [ -z "$hornetAutoUpdate" ]; then
        sudo sed -i 's/^hornetAutoUpdate=.*/hornetAutoUpdate=true/' $configs/swarm.cfg
    else
        sudo sed -i 's/^hornetAutoUpdate=.*/hornetAutoUpdate='$hornetAutoUpdate'/' $configs/swarm.cfg
    fi

    if [ -z "$goshimmerAutoUpdate" ]; then
        sudo sed -i 's/^goshimmerAutoUpdate=.*/goshimmerAutoUpdate=true/' $configs/swarm.cfg
    else
        sudo sed -i 's/^goshimmerAutoUpdate=.*/goshimmerAutoUpdate='$hornetAutoUpdate'/' $configs/swarm.cfg
    fi

    if [ "$keepDb" = "true" ] || "$allowDbReset" = "false" ]; then
        sudo sed -i 's/^hornetAllowDbReset=.*/hornetAllowDbReset=false/' $configs/swarm.cfg
    else
        if [ -z "$hornetAllowDbReset" ]; then
            sudo sed -i 's/^hornetAllowDbReset=.*/hornetAllowDbReset=true/' $configs/swarm.cfg
        else
            sudo sed -i 's/^hornetAllowDbReset=.*/hornetAllowDbReset='$hornetAllowDbReset'/' $configs/swarm.cfg
        fi
    fi

    if [ -z "$goshimmerAllowDbReset" ]; then
        sudo sed -i 's/^goshimmerAllowDbReset=.*/goshimmerAllowDbReset=true/' $configs/swarm.cfg
    else
        sudo sed -i 's/^goshimmerAllowDbReset=.*/goshimmerAllowDbReset='$goshimmerAllowDbReset'/' $configs/swarm.cfg
    fi

    if [ -z "$checkSync" ]; then
        sudo sed -i 's/^checkSync=.*/checkSync=true/' $configs/swarm.cfg
    else
        sudo sed -i 's/^checkSync=.*/checkSync='$checkSync'/' $configs/swarm.cfg
    fi    

    if [ -z "$maxLmi" ]; then
        sudo sed -i 's/^maxLmi=.*/maxLmi=360/' $configs/swarm.cfg
    else
        sudo sed -i 's/^maxLmi=.*/maxLmi='$maxLmi'/' $configs/swarm.cfg
    fi

    if [ -z "$proxyCheck" ]; then
        sudo sed -i 's/^proxyCheck=.*/proxyCheck=true/' $configs/swarm.cfg
    else
        sudo sed -i 's/^proxyCheck=.*/proxyCheck='$proxyCheck'/' $configs/swarm.cfg
    fi

    if [ -z "$logPruning" ]; then
        sudo sed -i 's/^logPruning=.*/logPruning=true/' $configs/swarm.cfg
    else
        sudo sed -i 's/^logPruning=.*/logPruning='$logPruning'/' $configs/swarm.cfg
    fi

    if [ -z "$logSize" ]; then
        sudo sed -i 's/^logSize=.*/logSize=10/' $configs/swarm.cfg
    else
        sudo sed -i 's/^logSize=.*/logSize='$logSize'/' $configs/swarm.cfg
    fi

    # Delete Bak file
    rm -rf $configs/swarm-backup.cfg
fi

####################################################################################################################################

if [ -f "$logs/watchdog-backup.cfg" ]; then
    source $logs/watchdog-backup.cfg
    # Updater for watchdog.log
    sudo sed -i 's/^hornetStatusCounter=.*/hornetStatusCounter='$hornetStatusCounter'/' $logs/watchdog
    sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $logs/watchdog
    sudo sed -i 's/^gosshimmerStatusCounter=.*/gosshimmerStatusCounter='$gosshimmerStatusCounter'/' $logs/watchdog
    sudo sed -i 's/^gosshimmerSyncCounter=.*/gosshimmerSyncCounter='$gosshimmerSyncCounter'/' $logs/watchdog
    # Delete Bak file
    rm -rf $logs/watchdog-backup.cfg
fi

####################################################################################################################################

#### REMOVE ALL BAKs
rm -rf $logs/*-backup.cfg$ $configs/*-backup.cfg$