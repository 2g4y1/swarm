#!/bin/bash
# GoShimmer MENU
while [ $exitCode -lt 1 ]; do
    clear
    CHOICE=$(
        whiptail --title "GoShimmer Menu" --menu "\nChoose an option" 16 65 0 \
        "1)" "GoShimmer Info" \
        "2)" "GoShimmer Configurations" \
        "3)" "GoShimmer Debugging" \
        "4)" "GoShimmer Installer" 3>&2 2>&1 1>&3
    )
    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
    fi

    case $CHOICE in
        "1)")
            source $modules/goshimmer/goshimmerInfo
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                CHOICE=$(
                    whiptail --title "GoShimmer Configurations" --menu "\nChoose an option" 16 65 0 \
                    "1)" "GoShimmer configuration" \
                    "2)" "Advanced Configuration" 3>&2 2>&1 1>&3
                )

                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi

                case $CHOICE in
                    "1)")
                        if [ -f "/usr/bin/goshimmer" ]; then
                            source $modules/goshimmer/goshimmerConfiguration
                        else
                            whiptail --title "GoShimmer Configuration" --msgbox "GoShimmer installation not found, please install GoShimmer first!" 8 65
                        fi
                    ;;
                    "2)")
                        while [ $exitCode -lt 1 ]; do
                            clear
                            CHOICE=$(
                                whiptail --title "GoShimmer Configurations" --menu "\nChoose an option" 16 65 0 \
                                "1)" "Config.json" \
                                "2)" "GoShimmer.cfg (SWARM)" 3>&2 2>&1 1>&3
                            )

                            exitstatus=$?
                            if [ "$exitstatus" = "1" ]; then
                                exitCode=1
                            fi

                            case $CHOICE in
                                "1)")
                                    sudo nano $goshimmerDir/config.json
                                    if (whiptail --title "GoShimmer Menu" --yesno --defaultno "Would you like to restart GoShimmer now?" 8 65); then
                                        {
                                            echo 0
                                            echo 50
                                            sudo systemctl restart goshimmer
                                            echo 100
                                            sleep 0.25
                                        } | whiptail --gauge "Please wait while GoShimmer is restarting..." 6 65 0
                                    fi
                                ;;
                                "2)")
                                    sudo nano $configs/goshimmer.cfg
                                    if (whiptail --title "GoShimmer Menu" --yesno --defaultno "Would you like to restart GoShimmer now?" 8 65); then
                                        {
                                            echo 0
                                            source $modules/goshimmer/configParser
                                            echo 50
                                            sudo systemctl restart goshimmer
                                            echo 100
                                            sleep 0.25
                                        } | whiptail --gauge "Please wait while GoShimmer is restarting..." 6 65 0
                                    fi
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                CHOICE=$(
                    whiptail --title "GoShimmer Debugging" --menu "\nChoose your option" 16 65 0 \
                    "1)" "Show GoShimmer log" \
                    "2)" "Start/Stop GoShimmer" \
                    "3)" "Reset GoShimmer Database" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        # Display last 65 lines of log
                        sudo journalctl -fu goshimmer | less -FRSXM
                    ;;
                    "2)")
                        CHOICE=$(
                            whiptail --title "GoShimmer Menu" --menu "\nChoose your option" 16 65 0 \
                            "1)" "Restart GoShimmer" \
                            "2)" "Start GoShimmer" \
                            "3)" "Stop GoShimmer" \
                            "4)" "Status GoShimmer" 3>&2 2>&1 1>&3
                        )
                        case $CHOICE in
                            "1)")
                                {
                                    echo 0
                                    echo 50
                                    sudo systemctl restart goshimmer
                                    echo 100
                                    sleep 0.25
                                } | whiptail --gauge "Please wait while GoShimmer is restarting..." 6 65 0
                                whiptail --title "GoShimmer Menu" --msgbox "GoShimmer successfully restarted" 8 65
                            ;;
                            "2)")
                                {
                                    echo 0
                                    echo 50
                                    sudo systemctl start goshimmer
                                    echo 100
                                    sleep 0.25
                                } | whiptail --gauge "Please wait while GoShimmer is starting..." 6 65 0
                                whiptail --title "GoShimmer Menu" --msgbox "GoShimmer successfully started" 8 65
                            ;;
                            "3)")
                                {
                                    echo 0
                                    echo 50
                                    sudo systemctl stop goshimmer
                                    echo 100
                                    sleep 0.25
                                } | whiptail --gauge "Please wait while GoShimmer is stopping..." 6 65 0
                                whiptail --title "GoShimmer Menu" --msgbox "GoShimmer successfully stopped" 8 65
                            ;;
                            "4)")
                                goshimmerStatus="$(sudo systemctl status goshimmer)"
                                whiptail --title "GoShimmer Menu" --msgbox "$goshimmerStatus" 15 65
                            ;;
                        esac
                    ;;
                    "3)")
                        if (whiptail --title "GoShimmer Menu" --yesno --defaultno "Do you really want to remove the goshimmer database?" 8 65); then
                            source $configs/goshimmer.cfg
                            {
                                echo 0
                                echo 50
                                sudo systemctl stop goshimmer
                                sudo rm -rf $goshimmerDir/mainnetdb $goshimmerDir/snapshots.bin
                                echo 100
                                sleep 0.25
                            } | whiptail --gauge "Please wait while the cleanup is running..." 6 65 0
                            whiptail --title "GoShimmer Menu" --msgbox "MainnetDB successfully reset" 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            CHOICE=$(
                whiptail --title "GoShimmer Installer" --menu "\nChoose your option" 16 65 0 \
                "1)" "Update GoShimmer" \
                "2)" "Install GoShimmer" \
                "3)" "Remove GoShimmer" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if [ -f "/usr/bin/goshimmer" ]; then
                        # Update GoShimmer
                        source $modules/goshimmer/getVersion
                        goshimmerStatus="$(systemctl show -p ActiveState --value goshimmer)"
                        if [ "$goshimmerStatus" = "active "] && [ "$currentGoshimmerVersion" != "\"v$latestGoShimmerVersion\"" ]; then
                            {
                                echo 20
                                sudo systemctl stop goshimmer
                                echo 40
                                source $modules/goshimmer/goshimmerInstaller
                                echo 60
                                source $modules/goshimmer/configParser
                                echo 80
                                sudo rm -rf $goshimmerDir/mainnetdb
                                sudo systemctl restart goshimmer
                                echo 100
                                sleep 0.5
                            } | whiptail --gauge "Please wait while GoShimmer is updated..." 6 65 0
                            whiptail --title "GoShimmer Menu" --msgbox "GoShimmer successfully updated" 8 65
                        else
                            whiptail --title "GoShimmer Menu" --msgbox "Congratulations, you have already installed the latest version of GoShimmer!" 8 65
                        fi
                    else
                        whiptail --title "GoShimmer Installer" --msgbox "Sorry, but GoShimmer is not installed!" 8 65
                    fi
                ;;
                "2)")
                    # INSTALL GoShimmer
                    if [ ! -f "/usr/bin/goshimmer" ]; then
                        {
                            echo 0
                            echo 10
                            source $configs/goshimmer.cfg
                            echo 20
                            sudo snap install go --classic > /dev/null 2>&1
                            echo 30
                            source $modules/goshimmer/getVersion
                            echo 40
                            source $modules/goshimmer/goshimmerInstaller
                        } | whiptail --gauge "Please wait while installing GoShimmer..." 6 65 0
                        if [ -f "/usr/bin/goshimmer" ]; then
                            {
                                echo 50
                                # CALL MODULE CONFIGPARSER
                                source $modules/goshimmer/configParser
                                echo 60
                                if [ "$ufw" = "true" ]; then
                                    sudo ufw allow $goshimmerGossipPort/tcp > /dev/null 2>&1
                                    sudo ufw allow $goshimmerAutopeeringPort/udp > /dev/null 2>&1
                                fi
                                sudo systemctl restart goshimmer > /dev/null 2>&1
                                echo 75
                                sleep 2
                                goshimmerStatus="$(systemctl show -p ActiveState --value goshimmer)"
                                if [ "$goshimmerStatus" != "active" ]; then
                                    sudo systemctl start goshimmer
                                fi
                                echo 100
                                sleep 0.2
                            } | whiptail --gauge "Please wait while GoShimmer will be prepared..." 6 65 0
                            whiptail --title "GoShimmer Installer" --msgbox "GoShimmer installation finished!\n\nYou need to open the following ports in your home router for peering\n\nGossip: $goshimmerGossipPort/tcp\nAutopeering: $goshimmerAutopeeringPort/udp" 16 65
                        else
                            whiptail --title "GoShimmer Installer" --msgbox "Error while installing GoShimmer. Please check GoShimmer.cfg and try again!" 8 65
                        fi
                    else
                        whiptail --title "GoShimmer Installer" --msgbox "GoShimmer already installed or not set in the SWARM.cfg!" 8 65
                    fi
                ;;
                "3)")
                    if (whiptail --title "GoShimmer - Installer" --yesno --defaultno "Do you really want to remove GoShimmer?" 8 65); then
                        {
                            echo 0
                            sleep 0.25
                            echo 15
                            sudo systemctl stop goshimmer > /dev/null 2>&1
                            sleep 0.25
                            echo 30
                            sleep 0.25
                            sudo systemctl disable goshimmer > /dev/null 2>&1
                            echo 45
                            sleep 0.25
                            sudo rm -rf /usr/bin/goshimmer /var/lib/goshimmer /lib/systemd/system/goshimmer.service /etc/default/goshimmer > /dev/null 2>&1
                            echo 60
                            sleep 0.25
                            echo 75
                            sudo systemctl daemon-reload > /dev/null 2>&1
                            echo 90
                            if [ "$ufw" = "true" ]; then
                                sudo ufw delete allow $goshimmerGossipPort/tcp > /dev/null 2>&1
                                sudo ufw delete allow $goshimmerAutopeeringPort/udp > /dev/null 2>&1
                            fi
                            sudo rm -rf $goshimmerDir > /dev/null 2>&1
                            if id hornet >/dev/null 2>&1; then
                                sudo deluser goshimmer >/dev/null
                            fi
                            echo 100
                            sleep 0.25
                        } | whiptail --gauge "Please wait while GoShimmer will be removed..." 6 65 0
                        whiptail --title "GoShimmer - Installer" --msgbox "GoShimmer successfully removed" 8 65
                    fi
                ;;
            esac
        ;;
    esac
done
exitCode=0